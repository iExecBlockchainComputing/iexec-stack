package com.iexec.worker.contracts.generated;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class WorkerPool extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b604051620034b1380380620034b18339810160405280805191906020018051820191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a0390811691909117909155909250869150811615156200007b57600080fd5b60018054600160a060020a03928316600160a060020a03199182168117909255600280549091169091179055328116339091161415620000ba57600080fd5b620000d33264010000000062001caa620003bf82021704565b6003848051620000e89291602001906200044f565b50601e600455600160058190556006849055600783905560088290556002805460a060020a60ff0219169055600d8054600160a060020a03191633600160a060020a031617905562000139620004d4565b808260018111156200014757fe5b60ff168152602001915050604051809103906000f08015156200016957600080fd5b600e8054600160a060020a031916600160a060020a0392909216919091179055600162000195620004d4565b80826001811115620001a357fe5b60ff168152602001915050604051809103906000f0801515620001c557600080fd5b600f8054600160a060020a031916600160a060020a03929092169190911790556000620001f1620004d4565b80826001811115620001ff57fe5b60ff168152602001915050604051809103906000f08015156200022157600080fd5b60108054600160a060020a031916600160a060020a03928316179055600e541663f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200029f57600080fd5b6102c65a03f11515620002b157600080fd5b5050600f54600160a060020a0316905063f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200031f57600080fd5b6102c65a03f115156200033157600080fd5b5050601054600160a060020a0316905063f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200039f57600080fd5b6102c65a03f11515620003b157600080fd5b505050505050505062000505565b60005433600160a060020a03908116911614620003db57600080fd5b600160a060020a0381161515620003f157600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049257805160ff1916838001178555620004c2565b82800160010185558215620004c2579182015b82811115620004c2578251825591602001919060010190620004a5565b50620004d0929150620004e5565b5090565b6040516107938062002d1e83390190565b6200050291905b80821115620004d05760008155600101620004ec565b90565b61280980620005156000396000f3006060604052600436106101df5763ffffffff60e060020a600035041663031ee1c881146101e4578063051c2a83146102275780630c50fd37146102845780630c6e29e31461030057806316ebf77d1461031357806321e6d3d5146103355780632b8fd18a14610354578063323e17b4146103865780634096c23d1461039957806341aff32c146103ac57806341cb01ad146103d757806347535d7b146103f6578063522bd042146104095780635a628525146104215780635bb4de2f146104435780636ab6936a146104565780636bad89a51461046957806371a0c8c31461047c5780637aab68ef1461049b5780637bd220bb1461057e57806383046b10146105ed578063835436b41461061157806387639c681461063057806389869163146106435780638daa4caf146106625780638f384d3914610675578063900b7b6214610694578063b6888137146106aa578063b889dc8d146106d9578063c3d3f02614610763578063c6c5b072146107bb578063c6ced32b146107ce578063cc6f06a3146107e1578063d2afa716146107f4578063deff41c11461082b578063e2d36ef51461083e578063ec1847b614610851578063f27f7be114610870578063f2fde38b14610883578063fceeccb6146108a2578063ff266d26146108b5575b600080fd5b34156101ef57600080fd5b610215600160a060020a036004351660243560443560ff6064351660843560a4356108d4565b60405190815260200160405180910390f35b341561023257600080fd5b610246600160a060020a0360043516610b2b565b60405196875260208701959095526040808701949094526060860192909252608085015260a084015260c083019190915260e0909101905180910390f35b341561028f57600080fd5b6102ec60048035600160a060020a031690604460248035908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a03169250610b68915050565b604051901515815260200160405180910390f35b341561030b57600080fd5b6102ec610bd1565b341561031e57600080fd5b6102ec600160a060020a0360043516602435610c99565b341561034057600080fd5b6102ec600160a060020a0360043516610e56565b341561035f57600080fd5b61036a600435610ed1565b604051600160a060020a03909116815260200160405180910390f35b341561039157600080fd5b61036a610ef9565b34156103a457600080fd5b61036a610f08565b34156103b757600080fd5b6102ec600160a060020a0360043581169060243581169060443516610f17565b34156103e257600080fd5b610215600160a060020a036004351661111a565b341561040157600080fd5b6102ec61112c565b341561041457600080fd5b6102ec600435151561114e565b341561042c57600080fd5b6102ec600160a060020a036004351660243561120a565b341561044e57600080fd5b6102ec6112a8565b341561046157600080fd5b610215611332565b341561047457600080fd5b61036a611338565b341561048757600080fd5b6102ec600160a060020a0360043516611347565b34156104a657600080fd5b6102ec60048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506113a295505050505050565b341561058957600080fd5b6105a3600160a060020a03600435811690602435166116b6565b604051808660048111156105b357fe5b60ff168152602081019590955250604080850193909352600160a060020a039091166060840152608083015260a090910191505180910390f35b34156105f857600080fd5b61060f6004356024356044356064356084356116fd565b005b341561061c57600080fd5b6102ec600160a060020a03600435166117a4565b341561063b57600080fd5b610215611853565b341561064e57600080fd5b6102ec600160a060020a0360043516611859565b341561066d57600080fd5b61036a6119c2565b341561068057600080fd5b6102ec600160a060020a03600435166119d1565b341561069f57600080fd5b61036a600435611a2c565b34156106b557600080fd5b6102ec600160a060020a036004358116906024359060443581169060643516611a58565b34156106e457600080fd5b6106ec611b42565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610728578082015183820152602001610710565b50505050905090810190601f1680156107555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561076e57600080fd5b610782600160a060020a0360043516611be0565b60405195865260208601949094526040808601939093526060850191909152608084015260a083019190915260c0909101905180910390f35b34156107c657600080fd5b610215611c1d565b34156107d957600080fd5b610215611c23565b34156107ec57600080fd5b610215611c29565b34156107ff57600080fd5b610807611c2f565b6040518082600181111561081757fe5b60ff16815260200191505060405180910390f35b341561083657600080fd5b61036a611c3f565b341561084957600080fd5b610215611c4e565b341561085c57600080fd5b610215600160a060020a0360043516611c54565b341561087b57600080fd5b610215611ca4565b341561088e57600080fd5b61060f600160a060020a0360043516611caa565b34156108ad57600080fd5b610215611d38565b34156108c057600080fd5b6102ec600160a060020a0360043516611d3f565b600160a060020a038087166000908152600b60209081526040808320600c835281842033909516845293909152812090919087151561091257600080fd5b86151561091e57600080fd5b6003810154600160a060020a0316156109ce57600187891860405190815260200160405180910390208787876040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f115156109a957600080fd5b5050602060405103516003820154600160a060020a039081169116146109ce57600080fd5b6001815460ff1660048111156109e057fe5b146109ea57600080fd5b805460ff19166002908117825560018083018a905590820188905560078301805490918101610a198382612788565b50600091825260208220018054600160a060020a03191633600160a060020a03818116929092179092556002546001860154911692638981d077928d9290916040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610aae57600080fd5b6102c65a03f11515610abf57600080fd5b505050604051805190501515610ad457600080fd5b33600160a060020a031689600160a060020a03167f1593a9a000265660fd299c9f8c9bbacfeb4d428861542e6c44b68615324225d48a60405190815260200160405180910390a35060010154979650505050505050565b600b602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b60008054819033600160a060020a03908116911614610b8657600080fd5b5060005b8351811015610bc657610bb385858381518110610ba357fe5b9060200190602002015185610f17565b1515610bbe57600080fd5b600101610b8a565b506001949350505050565b6002546000908190600160a060020a0316630c6e29e382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610c1d57600080fd5b6102c65a03f11515610c2e57600080fd5b505050604051805190501515610c4357600080fd5b6009805460018101610c558382612788565b60009283526020808420929092018054600160a060020a03191632600160a060020a03169081179091558352600a90915260409091208190556001925090505b5090565b6000805481908190819033600160a060020a03908116911614610cbb57600080fd5b600160a060020a038087166000908152600b602052604080822060025490965090921691633cb2a217918991516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d2a57600080fd5b6102c65a03f11515610d3b57600080fd5b505050604051805190501515610d5057600080fd5b60006006840181905591505b6007830154821015610ddd5760078301805483908110610d7857fe5b6000918252602080832090910154600160a060020a038981168452600c8352604080852091909216808552925290912060010154909150851415610dd2576006830154610dcc90600163ffffffff611ed016565b60068401555b816001019150610d5c565b600683015460009011610def57600080fd5b60028301859055610e08612a304263ffffffff611ed016565b6003840155600160a060020a0386167fa1b9f527f9799a46d54103401c99dc62f3744afe1d095a1c53620758dc38b2868660405190815260200160405180910390a250600195945050505050565b600e54600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610eb157600080fd5b6102c65a03f11515610ec257600080fd5b50505060405180519392505050565b6009805482908110610edf57fe5b600091825260209091200154600160a060020a0316905081565b601054600160a060020a031681565b600e54600160a060020a031681565b60008054819081908190819033600160a060020a03908116911614610f3b57600080fd5b6003600254600160a060020a03166384d62f328a60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f9657600080fd5b6102c65a03f11515610fa757600080fd5b505050604051805190506006811115610fbc57fe5b14610fc657600080fd5b600160a060020a038089166000908152600b60209081526040808320600c83528184208c86168552909252808320600254929850965092169163f69f190c918a91516040015260405160e060020a63ffffffff8416028152600160a060020a0390911660048201526024016040805180830381600087803b151561104957600080fd5b6102c65a03f1151561105a57600080fd5b50505060405180519060200180519193509091505030600160a060020a039081169083161461108857600080fd5b6000835460ff16600481111561109a57fe5b146110a457600080fd5b825460ff19166001178355600383018054600160a060020a03888116600160a060020a0319909216919091179091558781169089167fd8543c5d4025e941c30ead4b7da9861c3050452ebfb6c360972d772b5ab67e538360405190815260200160405180910390a3506001979650505050505050565b600a6020526000908152604090205481565b60008060025460a060020a900460ff16600181111561114757fe5b1490505b90565b60015460009033600160a060020a0390811691161461116c57600080fd5b81156111b957600160025460a060020a900460ff16600181111561118c57fe5b1461119657600080fd5b6002805474ff000000000000000000000000000000000000000019169055611202565b600060025460a060020a900460ff1660018111156111d357fe5b146111dd57600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790555b506001919050565b600160a060020a038281166000908152600b60209081526040808320600c8352818420339095168452939091528120805460ff191660031781556004830154919291611257906001611ed0565b6004830155600160a060020a033381169086167f4f5df7005a83b6f11e90ead1268eb534656169a5034e8d239c763471294be3d58660405190815260200160405180910390a3506001949350505050565b600254600090600160a060020a0316635bb4de2f82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156112f257600080fd5b6102c65a03f1151561130357600080fd5b50505060405180519050151561131857600080fd5b61132132611eea565b151561132c57600080fd5b50600190565b60075481565b600f54600160a060020a031681565b601054600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610eb157600080fd5b60008054819033600160a060020a039081169116146113c057600080fd5b50600160a060020a0385166000908152600b6020526040902060038101544290118015906113f2575060008160040154115b80611404575080600601548160040154145b151561140f57600080fd5b6114d686826101006040519081016040529081600082015481526020016001820154815260200160028201546000191660001916815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782018054806020026020016040519081016040528092919081815260200182805480156114c857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114aa575b505050505081525050611fa3565b15156114e157600080fd5b600254600160a060020a0316637877f0a1878787876000604051602001526040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561156e578082015183820152602001611556565b50505050905090810190601f16801561159b5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156115d15780820151838201526020016115b9565b50505050905090810190601f1680156115fe5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561163457808201518382015260200161161c565b50505050905090810190601f1680156116615780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561168457600080fd5b6102c65a03f1151561169557600080fd5b5050506040518051905015156116aa57600080fd5b50600195945050505050565b600c6020908152600092835260408084209091529082529020805460018201546002830154600384015460049094015460ff9093169391929091600160a060020a03169085565b60005433600160a060020a0390811691161461171857600080fd5b7f52bb55d3097463659f724f9b420d259719787a8563b48eb82368680999bfea0760045486600554876007548760085488604051808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390a160049490945560059290925550600755600855565b6000805433600160a060020a039081169116146117c057600080fd5b600254600160a060020a031663835436b48360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561181957600080fd5b6102c65a03f1151561182a57600080fd5b50505060405180519050151561183f57600080fd5b61184882611eea565b151561120257600080fd5b60055481565b60015460009081908190819033600160a060020a0390811691161461187d57600080fd5b600160a060020a0385166000908152600b60205260409020600581015490935042116118a857600080fd5b600091505b6007830154821015610bc657600783018054839081106118c957fe5b600091825260209091200154600160a060020a031690506001600160a060020a038087166000908152600c602090815260408083209386168352929052205460ff16600481111561191657fe5b146119b7576002546001840154600160a060020a0390911690636b4f6865908790849060006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561199157600080fd5b6102c65a03f115156119a257600080fd5b5050506040518051905015156119b757600080fd5b8160010191506118ad565b600054600160a060020a031690565b600f54600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610eb157600080fd5b6000600982815481101515611a3d57fe5b600091825260209091200154600160a060020a031692915050565b600154600090819033600160a060020a03908116911614611a7857600080fd5b611a8061112c565b1515611a8b57600080fd5b611a9484610e56565b1515611a9f57600080fd5b611aa8836119d1565b1515611ab357600080fd5b50600160a060020a0385166000908152600b60205260409020848155600454611ae390869063ffffffff6124e916565b6001820155611afb62093a804263ffffffff611ed016565b6005820155600160a060020a0386167fd94a7c8ec908f86fc38f7a1b7f8147a68057e508732ebccb830ef9e5333f75a660405160405180910390a250600195945050505050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd85780601f10611bad57610100808354040283529160200191611bd8565b820191906000526020600020905b815481529060010190602001808311611bbb57829003601f168201915b505050505081565b600160a060020a03166000908152600b60205260409020805460018201546002830154600384015460048501546005909501549395929491939092565b60045481565b60095490565b60085481565b60025460a060020a900460ff1681565b600054600160a060020a031681565b60065481565b600160a060020a0381166000818152600a6020526040812054600980549293919283908110611c7f57fe5b600091825260209091200154600160a060020a031614611c9e57600080fd5b92915050565b612a3081565b60005433600160a060020a03908116911614611cc557600080fd5b600160a060020a0381161515611cda57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b62093a8081565b6000805481908190819033600160a060020a03908116911614611d6157600080fd5b600160a060020a0385166000908152600b602052604090206003810154909350429011801590611d9357506004830154155b1515611d9e57600080fd5b600254600160a060020a031663ff266d268660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611df757600080fd5b6102c65a03f11515611e0857600080fd5b505050604051805190501515611e1d57600080fd5b600060068401819055600284018190556003840181905591505b6007830154821015610bc65760078301805483908110611e5357fe5b60009182526020808320909101546002860154600160a060020a038981168552600c845260408086209190931680865293529220600101549092501415611ec557600160a060020a038581166000908152600c60209081526040808320938516835292905220805460ff191660041790555b816001019150611e37565b600082820183811015611edf57fe5b8091505b5092915050565b600080611ef683611c54565b60098054919250906000198101908110611f0c57fe5b60009182526020909120015460098054600160a060020a039092169183908110611f3257fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600980546000198101908110611f6d57fe5b60009182526020909120018054600160a060020a03191690556009805490611f99906000198301612788565b5060019392505050565b6000806000806000806000806000611fb96127b1565b60008b5192508b60e001519150600099505b81518a101561216a57818a81518110611fe057fe5b9060200190602002015198506003600160a060020a03808f166000908152600c60209081526040808320938e168352929052205460ff16600481111561202257fe5b141561214757600160a060020a038d81166000908152600c602090815260408083208d85168452909152902060030154161515612060576001612063565b60035b60025460ff919091169850600160a060020a031663f69f190c8a60006040516040015260405160e060020a63ffffffff8416028152600160a060020a0390911660048201526024016040805180830381600087803b15156120c357600080fd5b6102c65a03f115156120d457600080fd5b5050506040518051906020018051985061210091506120fb9050888a63ffffffff6124fe16565b612529565b6001019550612115858763ffffffff611ed016565b600160a060020a03808f166000908152600c60209081526040808320938e16835292905220600401879055945061215f565b61215c8c60200151849063ffffffff611ed016565b92505b896001019950611fcb565b6000851161217757600080fd5b61219d612190600554606461274290919063ffffffff16565b849063ffffffff6124e916565b9050600099505b81518a101561244457818a815181106121b957fe5b9060200190602002015198506003600160a060020a03808f166000908152600c60209081526040808320938e168352929052205460ff1660048111156121fb57fe5b141561239057600160a060020a03808e166000908152600c60209081526040808320938d168352929052206004015461223c9082908763ffffffff61275416565b935061224e838563ffffffff61274216565b9250600260009054906101000a9004600160a060020a0316600160a060020a0316636b4f68658e8b8f6020015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156122d357600080fd5b6102c65a03f115156122e457600080fd5b5050506040518051905015156122f957600080fd5b600254600160a060020a031663eba04c688e8b8760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561236557600080fd5b6102c65a03f1151561237657600080fd5b50505060405180519050151561238b57600080fd5b612439565b600260009054906101000a9004600160a060020a0316600160a060020a0316637d691ff38e8b8f6020015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561241357600080fd5b6102c65a03f1151561242457600080fd5b50505060405180519050151561243957600080fd5b8960010199506121a4565b600254600160a060020a031663d57e3ffc8e328660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156124b057600080fd5b6102c65a03f115156124c157600080fd5b5050506040518051905015156124d657600080fd5b5060019c9b505050505050505050505050565b60006124f783836064612754565b9392505050565b6000808315156125115760009150611ee3565b5082820282848281151561252157fe5b0414611edf57fe5b700100000000000000000000000000000000680100000000000000006401000000006201000061010060106004600260001989019081041790810417908104179081041790810417908104179081041790810417600101906000906040517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a827252361660408201527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e082015261010081016040527e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff7f01000000000000000000000000000000000000000000000000000000000000008082870204818160ff038501510495507f8000000000000000000000000000000000000000000000000000000000000000851161010002860195505050505050919050565b60008282111561274e57fe5b50900390565b600061276961276385856124fe565b83612771565b949350505050565b600080828481151561277f57fe5b04949350505050565b8154818355818115116127ac576000838152602090206127ac9181019083016127c3565b505050565b60206040519081016040526000815290565b61114b91905b80821115610c9557600081556001016127c95600a165627a7a723058200373f12292e316fcaea3a11dad70abc63ed6464d8b331ffb6fb8f2c40d53b6a200296060604052341561000f57600080fd5b6040516020806107938339810160405280805160008054600160a060020a03191633600160a060020a0316178082559193508392509060a060020a60ff0219167401000000000000000000000000000000000000000083600181111561007157fe5b02179055505061070d806100866000396000f3006060604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d392cd981146100c9578063361895c8146100ef5780633af32abf1461012257806349c0a824146101415780636c2e5bd2146101605780639155e0831461017f578063aff177ca146101a3578063bb0e69e8146101f6578063d821906d14610249578063deff41c114610262578063ed6a596514610291578063f2fde38b146102b0578063f6117546146102cf575b600080fd5b34156100d457600080fd5b6100ed600160a060020a03600435166024351515610306565b005b34156100fa57600080fd5b61010e600160a060020a0360043516610392565b604051901515815260200160405180910390f35b341561012d57600080fd5b61010e600160a060020a03600435166103d5565b341561014c57600080fd5b61010e600160a060020a03600435166103f3565b341561016b57600080fd5b61010e600160a060020a0360043516610408565b341561018a57600080fd5b6100ed600160a060020a0360043516602435151561041d565b34156101ae57600080fd5b6100ed60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506104a99050565b341561020157600080fd5b6100ed60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506104fe9050565b341561025457600080fd5b6100ed60ff6004351661054e565b341561026d57600080fd5b610275610609565b604051600160a060020a03909116815260200160405180910390f35b341561029c57600080fd5b61010e600160a060020a0360043516610618565b34156102bb57600080fd5b6100ed600160a060020a0360043516610636565b34156102da57600080fd5b6102e26106d1565b604051808260018111156102f257fe5b60ff16815260200191505060405180910390f35b60005433600160a060020a0390811691161461032157600080fd5b600160a060020a03821660009081526001602052604090819020805460ff19168315151790557f3f50d04114467f3ca25c50f1540e2864f8a852c0380bbbbb603ebfda10b5baf2908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60008060005460a060020a900460ff1660018111156103ad57fe5b14156103c3576103bc826103d5565b90506103d0565b6103cc82610618565b1590505b919050565b600160a060020a031660009081526001602052604090205460ff1690565b60026020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461043857600080fd5b600160a060020a03821660009081526002602052604090819020805460ff19168315151790557f739f0e2acc6e65f7a52f8eabe2ca426ca0fb5158e8232d7bcd21bebd59b4ea52908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b6000805433600160a060020a039081169116146104c557600080fd5b5060005b82518110156104f9576104f18382815181106104e157fe5b9060200190602002015183610306565b6001016104c9565b505050565b6000805433600160a060020a0390811691161461051a57600080fd5b5060005b82518110156104f95761054683828151811061053657fe5b906020019060200201518361041d565b60010161051e565b60005433600160a060020a0390811691161461056957600080fd5b6000547f587143794c2ab5603767c7ce3b183f9a3fca65156acc90d8ce888ffeabece64f9060a060020a900460ff1682604051808360018111156105a957fe5b60ff1681526020018260018111156105bd57fe5b60ff1681526020019250505060405180910390a16000805482919074ff0000000000000000000000000000000000000000191660a060020a83600181111561060157fe5b021790555050565b600054600160a060020a031681565b600160a060020a031660009081526002602052604090205460ff1690565b60005433600160a060020a0390811691161461065157600080fd5b600160a060020a038116151561066657600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005460a060020a900460ff16815600a165627a7a72305820239e3277103e1d3aee04296052713e7fb997edd8714e0038a31e5b6bc6a6ed6b0029";

    protected WorkerPool(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WorkerPool(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<WorkerPoolPolicyUpdateEventResponse> getWorkerPoolPolicyUpdateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolPolicyUpdateEventResponse> responses = new ArrayList<WorkerPoolPolicyUpdateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
            typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolPolicyUpdateEventResponse> workerPoolPolicyUpdateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolPolicyUpdateEventResponse>() {
            @Override
            public WorkerPoolPolicyUpdateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
                typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderAcceptedEventResponse> getWorkOrderAcceptedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderAcceptedEventResponse> responses = new ArrayList<WorkOrderAcceptedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderAcceptedEventResponse typedResponse = new WorkOrderAcceptedEventResponse();
            typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderAcceptedEventResponse> workOrderAcceptedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderAcceptedEventResponse>() {
            @Override
            public WorkOrderAcceptedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderAcceptedEventResponse typedResponse = new WorkOrderAcceptedEventResponse();
                typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CallForContributionEventResponse> getCallForContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CallForContributionEventResponse> responses = new ArrayList<CallForContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
            typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CallForContributionEventResponse> callForContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CallForContributionEventResponse>() {
            @Override
            public CallForContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
                typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ContributeEventResponse> getContributeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContributeEventResponse> responses = new ArrayList<ContributeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContributeEventResponse typedResponse = new ContributeEventResponse();
            typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContributeEventResponse> contributeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContributeEventResponse>() {
            @Override
            public ContributeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContributeEventResponse typedResponse = new ContributeEventResponse();
                typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealConsensusEventResponse> getRevealConsensusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealConsensusEventResponse> responses = new ArrayList<RevealConsensusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
            typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealConsensusEventResponse> revealConsensusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealConsensusEventResponse>() {
            @Override
            public RevealConsensusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
                typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealEventResponse> getRevealEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealEventResponse> responses = new ArrayList<RevealEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealEventResponse typedResponse = new RevealEventResponse();
            typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealEventResponse> revealEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealEventResponse>() {
            @Override
            public RevealEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealEventResponse typedResponse = new RevealEventResponse();
                typedResponse.woid = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> contribute(String _woid, byte[] _resultHash, byte[] _resultSign, BigInteger _v, byte[] _r, byte[] _s) {
        Function function = new Function(
                "contribute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultSign), 
                new org.web3j.abi.datatypes.generated.Uint8(_v), 
                new org.web3j.abi.datatypes.generated.Bytes32(_r), 
                new org.web3j.abi.datatypes.generated.Bytes32(_s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>> m_consensusInfos(String param0) {
        final Function function = new Function("m_consensusInfos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple7<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> callForContributions(String _woid, List<String> _workers, String _enclaveChallenge) {
        Function function = new Function(
                "callForContributions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_workers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Address(_enclaveChallenge)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> subscribeToPool() {
        Function function = new Function(
                "subscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> revealConsensus(String _woid, byte[] _consensus) {
        Function function = new Function(
                "revealConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.generated.Bytes32(_consensus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isAppAllowed(String _app) {
        Function function = new Function(
                "isAppAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_app)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_workers(BigInteger param0) {
        Function function = new Function("m_workers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_workersAuthorizedListAddress() {
        Function function = new Function("m_workersAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_appsAuthorizedListAddress() {
        Function function = new Function("m_appsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> callForContribution(String _woid, String _worker, String _enclaveChallenge) {
        Function function = new Function(
                "callForContribution", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.Address(_enclaveChallenge)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_workerIndex(String param0) {
        Function function = new Function("m_workerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isOpen() {
        Function function = new Function("isOpen", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> switchOnOff(Boolean onoff) {
        Function function = new Function(
                "switchOnOff", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(onoff)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> reveal(String _woid, byte[] _result) {
        Function function = new Function(
                "reveal", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.generated.Bytes32(_result)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unsubscribeToPool() {
        Function function = new Function(
                "unsubscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumStakePolicy() {
        Function function = new Function("m_subscriptionMinimumStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> m_datasetsAuthorizedListAddress() {
        Function function = new Function("m_datasetsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isWorkerAllowed(String _worker) {
        Function function = new Function("isWorkerAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> finalizedWork(String _woid, String _stdout, String _stderr, String _uri) {
        Function function = new Function(
                "finalizedWork", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<BigInteger, byte[], byte[], String, BigInteger>> m_contributions(String param0, String param1) {
        final Function function = new Function("m_contributions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, byte[], byte[], String, BigInteger>>(
                new Callable<Tuple5<BigInteger, byte[], byte[], String, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, byte[], byte[], String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<BigInteger, byte[], byte[], String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> changeWorkerPoolPolicy(BigInteger _newStakeRatioPolicy, BigInteger _newSchedulerRewardRatioPolicy, BigInteger _newResultRetentionPolicy, BigInteger _newSubscriptionMinimumStakePolicy, BigInteger _newSubscriptionMinimumScorePolicy) {
        Function function = new Function(
                "changeWorkerPoolPolicy", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newStakeRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSchedulerRewardRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newResultRetentionPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> evictWorker(String _worker) {
        Function function = new Function(
                "evictWorker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_schedulerRewardRatioPolicy() {
        Function function = new Function("m_schedulerRewardRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _woid) {
        Function function = new Function(
                "claimFailedConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getWorkerPoolOwner() {
        Function function = new Function("getWorkerPoolOwner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isDatasetAllowed(String _dataset) {
        Function function = new Function("isDatasetAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getWorkerAddress(BigInteger _index) {
        Function function = new Function("getWorkerAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> acceptWorkOrder(String _woid, BigInteger _workReward, String _app, String _dataset) {
        Function function = new Function(
                "acceptWorkOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.generated.Uint256(_workReward), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_name() {
        Function function = new Function("m_name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>> getConsensusInfo(String _woid) {
        final Function function = new Function("getConsensusInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m_stakeRatioPolicy() {
        Function function = new Function("m_stakeRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkersCount() {
        Function function = new Function("getWorkersCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumScorePolicy() {
        Function function = new Function("m_subscriptionMinimumScorePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_workerPoolStatus() {
        Function function = new Function("m_workerPoolStatus", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> m_owner() {
        Function function = new Function("m_owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> m_subscriptionLockStakePolicy() {
        Function function = new Function("m_subscriptionLockStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkerIndex(String _worker) {
        Function function = new Function("getWorkerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> REVEAL_PERIOD_DURATION() {
        Function function = new Function("REVEAL_PERIOD_DURATION", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> CONSENSUS_DURATION_LIMIT() {
        Function function = new Function("CONSENSUS_DURATION_LIMIT", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> reopen(String _woid) {
        Function function = new Function(
                "reopen", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class WorkerPoolPolicyUpdateEventResponse {
        public BigInteger oldStakeRatioPolicy;

        public BigInteger newStakeRatioPolicy;

        public BigInteger oldSchedulerRewardRatioPolicy;

        public BigInteger newSchedulerRewardRatioPolicy;

        public BigInteger oldSubscriptionMinimumStakePolicy;

        public BigInteger newSubscriptionMinimumStakePolicy;

        public BigInteger oldSubscriptionMinimumScorePolicy;

        public BigInteger newSubscriptionMinimumScorePolicy;
    }

    public static class WorkOrderAcceptedEventResponse {
        public String woid;
    }

    public static class CallForContributionEventResponse {
        public String woid;

        public String worker;

        public BigInteger workerScore;
    }

    public static class ContributeEventResponse {
        public String woid;

        public String worker;

        public byte[] resultHash;
    }

    public static class RevealConsensusEventResponse {
        public String woid;

        public byte[] consensus;
    }

    public static class RevealEventResponse {
        public String woid;

        public String worker;

        public byte[] result;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
