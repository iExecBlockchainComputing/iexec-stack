package com.iexec.worker.contracts.generated;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class IexecHub extends Contract {
    private static final String BINARY = "";

    protected IexecHub(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IexecHub(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<WorkOrderEventResponse> getWorkOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderEventResponse> responses = new ArrayList<WorkOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderEventResponse typedResponse = new WorkOrderEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.dataset = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workOrderOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderEventResponse> workOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderEventResponse>() {
            @Override
            public WorkOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderEventResponse typedResponse = new WorkOrderEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.dataset = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workOrderOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderAcceptedEventResponse> getWorkOrderAcceptedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderAcceptedEventResponse> responses = new ArrayList<WorkOrderAcceptedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderAcceptedEventResponse typedResponse = new WorkOrderAcceptedEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderAcceptedEventResponse> workOrderAcceptedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderAcceptedEventResponse>() {
            @Override
            public WorkOrderAcceptedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderAcceptedEventResponse typedResponse = new WorkOrderAcceptedEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderRevealingEventResponse> getWorkOrderRevealingEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderRevealing", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderRevealingEventResponse> responses = new ArrayList<WorkOrderRevealingEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderRevealingEventResponse typedResponse = new WorkOrderRevealingEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderRevealingEventResponse> workOrderRevealingEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderRevealing", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderRevealingEventResponse>() {
            @Override
            public WorkOrderRevealingEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderRevealingEventResponse typedResponse = new WorkOrderRevealingEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderCancelledEventResponse> getWorkOrderCancelledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderCancelled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderCancelledEventResponse> responses = new ArrayList<WorkOrderCancelledEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderCancelledEventResponse typedResponse = new WorkOrderCancelledEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderCancelledEventResponse> workOrderCancelledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderCancelled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderCancelledEventResponse>() {
            @Override
            public WorkOrderCancelledEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderCancelledEventResponse typedResponse = new WorkOrderCancelledEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderAbortedEventResponse> getWorkOrderAbortedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderAborted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderAbortedEventResponse> responses = new ArrayList<WorkOrderAbortedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderAbortedEventResponse typedResponse = new WorkOrderAbortedEventResponse();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderAbortedEventResponse> workOrderAbortedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderAborted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderAbortedEventResponse>() {
            @Override
            public WorkOrderAbortedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderAbortedEventResponse typedResponse = new WorkOrderAbortedEventResponse();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkOrderCompletedEventResponse> getWorkOrderCompletedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkOrderCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkOrderCompletedEventResponse> responses = new ArrayList<WorkOrderCompletedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkOrderCompletedEventResponse typedResponse = new WorkOrderCompletedEventResponse();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkOrderCompletedEventResponse> workOrderCompletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkOrderCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkOrderCompletedEventResponse>() {
            @Override
            public WorkOrderCompletedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkOrderCompletedEventResponse typedResponse = new WorkOrderCompletedEventResponse();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateAppEventResponse> getCreateAppEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateApp", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateAppEventResponse> responses = new ArrayList<CreateAppEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateAppEventResponse typedResponse = new CreateAppEventResponse();
            typedResponse.appOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.appName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.appParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateAppEventResponse> createAppEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateApp", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateAppEventResponse>() {
            @Override
            public CreateAppEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateAppEventResponse typedResponse = new CreateAppEventResponse();
                typedResponse.appOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.appName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.appParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateDatasetEventResponse> getCreateDatasetEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateDataset", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateDatasetEventResponse> responses = new ArrayList<CreateDatasetEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateDatasetEventResponse typedResponse = new CreateDatasetEventResponse();
            typedResponse.datasetOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.dataset = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.datasetName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.datasetPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.datasetParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateDatasetEventResponse> createDatasetEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateDataset", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateDatasetEventResponse>() {
            @Override
            public CreateDatasetEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateDatasetEventResponse typedResponse = new CreateDatasetEventResponse();
                typedResponse.datasetOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.dataset = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.datasetName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.datasetPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.datasetParams = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateWorkerPoolEventResponse> getCreateWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateWorkerPoolEventResponse> responses = new ArrayList<CreateWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
            typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.workerPoolName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateWorkerPoolEventResponse> createWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateWorkerPoolEventResponse>() {
            @Override
            public CreateWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
                typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.workerPoolName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OpenWorkerPoolEventResponse> getOpenWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OpenWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OpenWorkerPoolEventResponse> responses = new ArrayList<OpenWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OpenWorkerPoolEventResponse typedResponse = new OpenWorkerPoolEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OpenWorkerPoolEventResponse> openWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OpenWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OpenWorkerPoolEventResponse>() {
            @Override
            public OpenWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OpenWorkerPoolEventResponse typedResponse = new OpenWorkerPoolEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CloseWorkerPoolEventResponse> getCloseWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CloseWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CloseWorkerPoolEventResponse> responses = new ArrayList<CloseWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CloseWorkerPoolEventResponse typedResponse = new CloseWorkerPoolEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CloseWorkerPoolEventResponse> closeWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CloseWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CloseWorkerPoolEventResponse>() {
            @Override
            public CloseWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CloseWorkerPoolEventResponse typedResponse = new CloseWorkerPoolEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkerPoolUnsubscriptionEventResponse> getWorkerPoolUnsubscriptionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolUnsubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolUnsubscriptionEventResponse> responses = new ArrayList<WorkerPoolUnsubscriptionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolUnsubscriptionEventResponse> workerPoolUnsubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolUnsubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolUnsubscriptionEventResponse>() {
            @Override
            public WorkerPoolUnsubscriptionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkerPoolEvictionEventResponse> getWorkerPoolEvictionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolEviction", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolEvictionEventResponse> responses = new ArrayList<WorkerPoolEvictionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolEvictionEventResponse typedResponse = new WorkerPoolEvictionEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolEvictionEventResponse> workerPoolEvictionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolEviction", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolEvictionEventResponse>() {
            @Override
            public WorkerPoolEvictionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolEvictionEventResponse typedResponse = new WorkerPoolEvictionEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkerPoolSubscriptionEventResponse> getWorkerPoolSubscriptionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolSubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolSubscriptionEventResponse> responses = new ArrayList<WorkerPoolSubscriptionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolSubscriptionEventResponse> workerPoolSubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolSubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolSubscriptionEventResponse>() {
            @Override
            public WorkerPoolSubscriptionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AccurateContributionEventResponse> getAccurateContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccurateContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccurateContributionEventResponse> responses = new ArrayList<AccurateContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccurateContributionEventResponse> accurateContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccurateContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccurateContributionEventResponse>() {
            @Override
            public AccurateContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<FaultyContributionEventResponse> getFaultyContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("FaultyContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<FaultyContributionEventResponse> responses = new ArrayList<FaultyContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FaultyContributionEventResponse> faultyContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("FaultyContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, FaultyContributionEventResponse>() {
            @Override
            public FaultyContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.woid = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Deposit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositEventResponse> depositEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Deposit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Withdraw", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Withdraw", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RewardEventResponse> getRewardEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Reward", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RewardEventResponse> responses = new ArrayList<RewardEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RewardEventResponse typedResponse = new RewardEventResponse();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RewardEventResponse> rewardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Reward", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RewardEventResponse>() {
            @Override
            public RewardEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RewardEventResponse typedResponse = new RewardEventResponse();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SeizeEventResponse> getSeizeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Seize", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SeizeEventResponse> responses = new ArrayList<SeizeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SeizeEventResponse typedResponse = new SeizeEventResponse();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SeizeEventResponse> seizeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Seize", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SeizeEventResponse>() {
            @Override
            public SeizeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SeizeEventResponse typedResponse = new SeizeEventResponse();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> subscribeToPool() {
        Function function = new Function(
                "subscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> m_contributionHistory() {
        final Function function = new Function("m_contributionHistory", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createWorkOrder(String _workerPool, String _app, String _dataset, String _workOrderParam, BigInteger _workReward, BigInteger _askedTrust, Boolean _dappCallback, String _beneficiary) {
        Function function = new Function(
                "createWorkOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset), 
                new org.web3j.abi.datatypes.Utf8String(_workOrderParam), 
                new org.web3j.abi.datatypes.generated.Uint256(_workReward), 
                new org.web3j.abi.datatypes.generated.Uint256(_askedTrust), 
                new org.web3j.abi.datatypes.Bool(_dappCallback), 
                new org.web3j.abi.datatypes.Address(_beneficiary)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _amount) {
        Function function = new Function(
                "withdraw", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createDataset(String _datasetName, BigInteger _datasetPrice, String _datasetParams) {
        Function function = new Function(
                "createDataset", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_datasetName), 
                new org.web3j.abi.datatypes.generated.Uint256(_datasetPrice), 
                new org.web3j.abi.datatypes.Utf8String(_datasetParams)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setRevealingStatus(String _woid) {
        Function function = new Function(
                "setRevealingStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unsubscribeToPool() {
        Function function = new Function(
                "unsubscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkBalance(String _owner) {
        final Function function = new Function("checkBalance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> openCloseWorkerPool(String _workerPool, Boolean open) {
        Function function = new Function(
                "openCloseWorkerPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool), 
                new org.web3j.abi.datatypes.Bool(open)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createWorkerPool(String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        Function function = new Function(
                "createWorkerPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_scores(String param0) {
        Function function = new Function("m_scores", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unlockForWork(String _woid, String _user, BigInteger _amount) {
        Function function = new Function(
                "unlockForWork", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelWorkOrder(String _woid) {
        Function function = new Function(
                "cancelWorkOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finalizedWorkOrder(String _woid, String _stdout, String _stderr, String _uri) {
        Function function = new Function(
                "finalizedWorkOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> seizeForWork(String _woid, String _worker, BigInteger _amount) {
        Function function = new Function(
                "seizeForWork", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> evictWorker(String _worker) {
        Function function = new Function(
                "evictWorker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getWorkOrderStatus(String _woid) {
        Function function = new Function("getWorkOrderStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> lockForWork(String _woid, String _user, BigInteger _amount) {
        Function function = new Function(
                "lockForWork", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _woid) {
        Function function = new Function(
                "claimFailedConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getWorkOrderWorkReward(String _woid) {
        Function function = new Function("getWorkOrderWorkReward", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> acceptWorkOrder(String _woid, String _workerPool) {
        Function function = new Function(
                "acceptWorkOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_workerPool)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> rlc() {
        Function function = new Function("rlc", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger _amount) {
        Function function = new Function(
                "deposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> m_accounts(String param0) {
        final Function function = new Function("m_accounts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> m_woInfos(String param0) {
        final Function function = new Function("m_woInfos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rewardForConsensus(String _woid, String _scheduler, BigInteger _amount) {
        Function function = new Function(
                "rewardForConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_scheduler), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rewardForWork(String _woid, String _worker, BigInteger _amount) {
        Function function = new Function(
                "rewardForWork", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getWorkerStatus(String _worker) {
        final Function function = new Function("getWorkerStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createApp(String _appName, BigInteger _appPrice, String _appParams) {
        Function function = new Function(
                "createApp", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_appName), 
                new org.web3j.abi.datatypes.generated.Uint256(_appPrice), 
                new org.web3j.abi.datatypes.Utf8String(_appParams)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> reopen(String _woid) {
        Function function = new Function(
                "reopen", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_woid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _workerPoolHubAddress, String _appHubAddress, String _datasetHubAddress, String _workOrderHubAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_workerPoolHubAddress), 
                new org.web3j.abi.datatypes.Address(_appHubAddress), 
                new org.web3j.abi.datatypes.Address(_datasetHubAddress), 
                new org.web3j.abi.datatypes.Address(_workOrderHubAddress)));
        return deployRemoteCall(IexecHub.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _workerPoolHubAddress, String _appHubAddress, String _datasetHubAddress, String _workOrderHubAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_workerPoolHubAddress), 
                new org.web3j.abi.datatypes.Address(_appHubAddress), 
                new org.web3j.abi.datatypes.Address(_datasetHubAddress), 
                new org.web3j.abi.datatypes.Address(_workOrderHubAddress)));
        return deployRemoteCall(IexecHub.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static IexecHub load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static IexecHub load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class WorkOrderEventResponse {
        public String workerPool;

        public String app;

        public String dataset;

        public String woid;

        public String workOrderOwner;
    }

    public static class WorkOrderAcceptedEventResponse {
        public String workerPool;

        public String woid;
    }

    public static class WorkOrderRevealingEventResponse {
        public String workerPool;

        public String woid;
    }

    public static class WorkOrderCancelledEventResponse {
        public String workerPool;

        public String woid;
    }

    public static class WorkOrderAbortedEventResponse {
        public String woid;

        public String workerPool;
    }

    public static class WorkOrderCompletedEventResponse {
        public String woid;

        public String workerPool;
    }

    public static class CreateAppEventResponse {
        public String appOwner;

        public String app;

        public String appName;

        public BigInteger appPrice;

        public String appParams;
    }

    public static class CreateDatasetEventResponse {
        public String datasetOwner;

        public String dataset;

        public String datasetName;

        public BigInteger datasetPrice;

        public String datasetParams;
    }

    public static class CreateWorkerPoolEventResponse {
        public String workerPoolOwner;

        public String workerPool;

        public String workerPoolName;
    }

    public static class OpenWorkerPoolEventResponse {
        public String workerPool;
    }

    public static class CloseWorkerPoolEventResponse {
        public String workerPool;
    }

    public static class WorkerPoolUnsubscriptionEventResponse {
        public String workerPool;

        public String worker;
    }

    public static class WorkerPoolEvictionEventResponse {
        public String workerPool;

        public String worker;
    }

    public static class WorkerPoolSubscriptionEventResponse {
        public String workerPool;

        public String worker;
    }

    public static class AccurateContributionEventResponse {
        public String worker;

        public String woid;
    }

    public static class FaultyContributionEventResponse {
        public String worker;

        public String woid;
    }

    public static class DepositEventResponse {
        public String owner;

        public BigInteger amount;
    }

    public static class WithdrawEventResponse {
        public String owner;

        public BigInteger amount;
    }

    public static class RewardEventResponse {
        public String user;

        public BigInteger amount;
    }

    public static class SeizeEventResponse {
        public String user;

        public BigInteger amount;
    }
}
