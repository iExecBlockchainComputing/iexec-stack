package com.iexec.scheduler.contracts.generated;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class IexecHub extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b60405160a080612ce1833981016040528080519190602001805191906020018051919060200180519190602001805160008054600160a060020a0319908116600160a060020a03998a16178255600180548216988a169890981790975560028054881696891696909617909555600380548716948816949094179093555050600480549093169316929092179055612c349081906100ad90396000f3006060604052600436106101195763ffffffff60e060020a600035041663181578a5811461011e5780632e1a7d4d14610178578063448be440146101a257806344aaedb8146101d35780635f515226146102b6578063614e84b7146102ed57806366de5a4f1461031157806369e99b5c1461038b57806376aafbdb146103aa5780638537c515146103c9578063855e9770146103f157806389869163146104195780638d877dd3146104385780638e6ca7f914610460578063a5c93b3214610485578063b017c03614610567578063b1ddd3121461057a578063b6b55f2514610599578063be02ee6e146105af578063ca44a11f146105ce578063deba350f146105f6578063f69f190c14610615578063fdcb969f14610656575b600080fd5b341561012957600080fd5b61013d600160a060020a03600435166106e2565b604051600160a060020a039586168152938516602085015291841660408085019190915293166060830152608082015260a001905180910390f35b341561018357600080fd5b61018e600435610722565b604051901515815260200160405180910390f35b34156101ad57600080fd5b6101c1600160a060020a0360043516610832565b60405190815260200160405180910390f35b34156101de57600080fd5b61018e60048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506108ad95505050505050565b34156102c157600080fd5b6102d5600160a060020a0360043516610d4e565b60405191825260208201526040908101905180910390f35b34156102f857600080fd5b61018e600160a060020a03600435166024351515610d71565b341561031c57600080fd5b61036f60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460208101359450604001359250610f5a915050565b604051600160a060020a03909116815260200160405180910390f35b341561039657600080fd5b6101c1600160a060020a03600435166110fd565b34156103b557600080fd5b61018e600160a060020a036004351661110f565b34156103d457600080fd5b61018e600160a060020a03600435811690602435166044356112aa565b34156103fc57600080fd5b61018e600160a060020a03600435811690602435166044356112ed565b341561042457600080fd5b61018e600160a060020a0360043516611466565b341561044357600080fd5b61018e600160a060020a0360043581169060243516604435611605565b341561046b57600080fd5b61018e600160a060020a036004358116906024351661163d565b341561049057600080fd5b61036f60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965050505091351515915061178b9050565b341561057257600080fd5b61036f6119c9565b341561058557600080fd5b61018e600160a060020a03600435166119d8565b34156105a457600080fd5b61018e600435611c27565b34156105ba57600080fd5b6102d5600160a060020a0360043516611d4c565b34156105d957600080fd5b61018e600160a060020a0360043581169060243516604435611d65565b341561060157600080fd5b61018e600160a060020a0360043516611e23565b341561062057600080fd5b610634600160a060020a0360043516611f27565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561066157600080fd5b61036f60048035600160a060020a03908116916024803583169260443516919060849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650508435946020810135945060408101351515935060600135600160a060020a03169150611fc09050565b60076020526000908152604090208054600182015460028301546003840154600490940154600160a060020a039384169492841693918216929091169085565b600160a060020a03331660009081526005602052604081205461074b908363ffffffff612a3a16565b600160a060020a03338181166000908152600560205260408082209490945580549092169263a9059cbb928691516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156107c057600080fd5b6102c65a03f115156107d157600080fd5b5050506040518051905015156107e657600080fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643383604051600160a060020a03909216825260208201526040908101905180910390a1506001919050565b600454600090600160a060020a031663448be44083836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561088d57600080fd5b6102c65a03f1151561089e57600080fd5b50505060405180519392505050565b600160a060020a0380851660009081526007602052604081206001810154919290918391829182913381169116146108e457600080fd5b6002808501549054600160a060020a0391821694501663b35bbe8d8460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561094757600080fd5b6102c65a03f1151561095857600080fd5b505050604051805192505060008211156109f5576002546109ea90600160a060020a031663ffb42b518560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156109c957600080fd5b6102c65a03f115156109da57600080fd5b5050506040518051905083612a4c565b15156109f557600080fd5b6003840154600160a060020a031615610b21576003805490850154600160a060020a03918216916323cf57a9911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610a6a57600080fd5b6102c65a03f11515610a7b57600080fd5b50505060405180519150506000811115610b21576003805490850154610b1691600160a060020a039081169163d5c4af96911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610af557600080fd5b6102c65a03f11515610b0657600080fd5b5050506040518051905082612a4c565b1515610b2157600080fd5b600454600160a060020a031663699045768a8a8a8a6000604051602001526040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610bae578082015183820152602001610b96565b50505050905090810190601f168015610bdb5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610c11578082015183820152602001610bf9565b50505050905090810190601f168015610c3e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015610c74578082015183820152602001610c5c565b50505050905090810190601f168015610ca15780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b1515610cc457600080fd5b6102c65a03f11515610cd557600080fd5b505050604051805190501515610cea57600080fd5b60018401547f3539e9d7fc5ab39b3c91f9ef992ac376766766097c7d455339a55cca09bc791d908a90600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a150600198975050505050505050565b600160a060020a0316600090815260056020526040902080546001909101549091565b600082600160a060020a03338116908216638daa4caf84604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610dbd57600080fd5b6102c65a03f11515610dce57600080fd5b50505060405180519050600160a060020a0316141515610ded57600080fd5b8215610ea45780600160a060020a031663522bd042600160006040516020015260405160e060020a63ffffffff84160281529015156004820152602401602060405180830381600087803b1515610e4357600080fd5b6102c65a03f11515610e5457600080fd5b505050604051805190501515610e6957600080fd5b83600160a060020a03167f48f19626656fa2b916046af8d89884111985c4ec7371b02dfb3b68c0687f9cf360405160405180910390a2610f50565b80600160a060020a031663522bd0426000806040516020015260405160e060020a63ffffffff84160281529015156004820152602401602060405180830381600087803b1515610ef357600080fd5b6102c65a03f11515610f0457600080fd5b505050604051805190501515610f1957600080fd5b83600160a060020a03167f9bd5937bafca7ff27268e444df6870f4547c3535f6ba2910436cbe102f92c47760405160405180910390a25b5060019392505050565b6001546000908190600160a060020a03166366de5a4f8787878786604051602001526040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015610fdd578082015183820152602001610fc5565b50505050905090810190601f16801561100a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b151561102b57600080fd5b6102c65a03f1151561103c57600080fd5b50505060405180519050905080600160a060020a031632600160a060020a03167f3c29f4ff1e741e465a1ad9cc4c0b8e51c046c021ca9e77172d812ae667f566f88860405160208082528190810183818151815260200191508051906020019080838360005b838110156110ba5780820151838201526020016110a2565b50505050905090810190601f1680156110e75780820380516001836020036101000a031916815260200191505b509250505060405180910390a395945050505050565b60066020526000908152604090205481565b600160a060020a03808216600090815260076020526040812080549192909133821691161461113d57600080fd5b61114b338260040154612a4c565b151561115657600080fd5b600454600160a060020a031663473591378460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111af57600080fd5b6102c65a03f115156111c057600080fd5b5050506040518051905015156111d557600080fd5b6001810154600160a060020a03166376aafbdb8460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561123057600080fd5b6102c65a03f1151561124157600080fd5b50505060405180519050151561125657600080fd5b6001810154600160a060020a03167f0e42256f465cbb1da1f2a38ed99bf97404e87fcb662b54c0c4a0224810e03b9884604051600160a060020a03909116815260200160405180910390a250600192915050565b600160a060020a0380841660009081526007602052604081206001015490913381169116146112d857600080fd5b6112e28383612ae1565b1515610f5057600080fd5b600160a060020a03808416600090815260076020526040812060010154909133811691161461131b57600080fd5b600160a060020a03831660009081526006602052604090205461136e9061134990603263ffffffff612b6216565b600160a060020a0385166000908152600660205260409020549063ffffffff612a3a16565b600160a060020a0384166000818152600660205260409081902092909255907fd21e70eb7104cb6f403402b79fe1c088dc56b69ecb7474ae68a3e861a5a6d49990869051600160a060020a03909116815260200160405180910390a2600160a060020a0383166000908152600560205260409020600101546113f6908363ffffffff612a3a16565b600160a060020a03841660009081526005602052604090819020600101919091557f4051ba94e08bb094159fc38391422b4b8ccfd2b1f8919c0eb37bb042d4b9cd8e908490849051600160a060020a03909216825260208201526040908101905180910390a15060019392505050565b600160a060020a038082166000908152600760205260408120600181015481546004830154939492939183169261149f92911690612a4c565b15156114aa57600080fd5b600454600160a060020a031663f7374e618560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561150357600080fd5b6102c65a03f1151561151457600080fd5b50505060405180519050151561152957600080fd5b80600160a060020a031663898691638560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561158057600080fd5b6102c65a03f1151561159157600080fd5b5050506040518051905015156115a657600080fd5b60018201547f1017c7c34775b0220408ff988a67b68f03429408cbe5ca9c2782a39f2ac30df6908590600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a15060019392505050565b600160a060020a03808416600090815260076020526040812060010154909133811691161461163357600080fd5b6112e28383612b7a565b60006116a98284600160a060020a031663e2d36ef56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561168957600080fd5b6102c65a03f1151561169a57600080fd5b50505060405180519050612b7a565b15156116b457600080fd5b600154600160a060020a0316638e6ca7f9848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561171557600080fd5b6102c65a03f1151561172657600080fd5b50505060405180519050151561173b57600080fd5b82600160a060020a03167f9644170e77fec17243f5fdc3519cba6d2162d1dda59af75508fd9a2005aeb78483604051600160a060020a03909116815260200160405180910390a250600192915050565b6000811561194657600254600160a060020a031663d03fb721878787876000604051602001526040518563ffffffff1660e060020a02815260040180806020018581526020018060200180602001848103845288818151815260200191508051906020019080838360005b8381101561180e5780820151838201526020016117f6565b50505050905090810190601f16801561183b5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611871578082015183820152602001611859565b50505050905090810190601f16801561189e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156118d45780820151838201526020016118bc565b50505050905090810190601f1680156119015780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561192457600080fd5b6102c65a03f1151561193557600080fd5b5050506040518051905090506119c0565b600354600160a060020a03166327b09104878787876000604051602001526040518563ffffffff1660e060020a02815260040180806020018581526020018060200180602001848103845288818151815260200191508051906020019080838360008381101561180e5780820151838201526020016117f6565b95945050505050565b600054600160a060020a031681565b600081600160a060020a031663cc6f06a36000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611a2057600080fd5b6102c65a03f11515611a3157600080fd5b5050506040518051600160a060020a03331660009081526006602052604090205410159050611a5f57600080fd5b81600160a060020a0316636ab6936a6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611aa557600080fd5b6102c65a03f11515611ab657600080fd5b5050506040518051600160a060020a03331660009081526005602052604090205410159050611ae457600080fd5b611b4e3383600160a060020a031663e2d36ef56000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611b2e57600080fd5b6102c65a03f11515611b3f57600080fd5b50505060405180519050612ae1565b1515611b5957600080fd5b600154600160a060020a031663b1ddd3128360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611bb257600080fd5b6102c65a03f11515611bc357600080fd5b505050604051805190501515611bd857600080fd5b81600160a060020a03167fd3548f8b6a2a11c4a35ef5a16dbf7142c9db5163c7d46e7f66482664277cff0732604051600160a060020a03909116815260200160405180910390a2506001919050565b60008054600160a060020a03166323b872dd333085856040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515611c9357600080fd5b6102c65a03f11515611ca457600080fd5b505050604051805190501515611cb957600080fd5b600160a060020a033316600090815260056020526040902054611ce2908363ffffffff612bf916565b33600160a060020a03811660009081526005602052604090819020929092557fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c91849051600160a060020a03909216825260208201526040908101905180910390a1506001919050565b6005602052600090815260409020805460019091015482565b600160a060020a038084166000908152600760205260408120600101549091338116911614611d9357600080fd5b600160a060020a038316600090815260066020526040902054611dbd90600163ffffffff612bf916565b600160a060020a0384166000818152600660205260409081902092909255907f98b231d22df4a95e9d99b5d3f4d25fab5a821c22d7f517a522731c2892ed453590869051600160a060020a03909116815260200160405180910390a26112e28383612a4c565b600160a060020a038082166000908152600760205260408120600181015491929091338216911614611e5457600080fd5b600454600160a060020a03166332b4b1298460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611ead57600080fd5b6102c65a03f11515611ebe57600080fd5b505050604051805190501515611ed357600080fd5b6001810154600160a060020a03167f36376f7c5cd533881cdbf5cfdaf43caaf51bd7573651015387e9f78061842e8284604051600160a060020a03909116815260200160405180910390a250600192915050565b6001546000908190600160a060020a031663d440c6f384836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f8457600080fd5b6102c65a03f11515611f9557600080fd5b5050506040518051600160a060020a0394909416600090815260066020526040902054939492505050565b600154600090819081908190600160a060020a031663fa33e1778d836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561202157600080fd5b6102c65a03f1151561203257600080fd5b50505060405180519050151561204757600080fd5b600254600160a060020a031663098d0f4a8c60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156120a057600080fd5b6102c65a03f115156120b157600080fd5b5050506040518051905015156120c657600080fd5b600254600160a060020a0316635575e6838c60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561211f57600080fd5b6102c65a03f1151561213057600080fd5b50505060405180519050151561214557600080fd5b600254600160a060020a03166368684b568c8e60006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156121a657600080fd5b6102c65a03f115156121b757600080fd5b5050506040518051905015156121cc57600080fd5b600254600160a060020a0316638f6d016f8c3360006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561222d57600080fd5b6102c65a03f1151561223e57600080fd5b50505060405180519050151561225357600080fd5b879250600160a060020a038a161561260657600354600160a060020a03166316265b4e8b60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156122be57600080fd5b6102c65a03f115156122cf57600080fd5b5050506040518051905015156122e457600080fd5b600354600160a060020a0316635575e6838b60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561233d57600080fd5b6102c65a03f1151561234e57600080fd5b50505060405180519050151561236357600080fd5b600354600160a060020a03166368684b568b8e60006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156123c457600080fd5b6102c65a03f115156123d557600080fd5b5050506040518051905015156123ea57600080fd5b600354600160a060020a031663918f66b78b8d60006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561244b57600080fd5b6102c65a03f1151561245c57600080fd5b50505060405180519050151561247157600080fd5b600354600160a060020a0316638f6d016f8b3360006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156124d257600080fd5b6102c65a03f115156124e357600080fd5b5050506040518051905015156124f857600080fd5b600254600160a060020a03166376bc70c08c8c60006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561255957600080fd5b6102c65a03f1151561256a57600080fd5b50505060405180519050151561257f57600080fd5b60035461260390600160a060020a03166323cf57a98c60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156125dc57600080fd5b6102c65a03f115156125ed57600080fd5b505050604051805185915063ffffffff612bf916565b92505b60025461266390600160a060020a031663b35bbe8d8d60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156125dc57600080fd5b600160a060020a033316600090815260056020526040902054909350839010156126c557600160a060020a0333166000908152600560205260409020546126ba906126b590859063ffffffff612a3a16565b611c27565b15156126c557600080fd5b600160a060020a0333166000908152600560205260409020546126ee908463ffffffff612a3a16565b6005600033600160a060020a0316600160a060020a0316815260200190815260200160002060000181905550600460009054906101000a9004600160a060020a0316600160a060020a0316632d94231b338e8e8e8e8e8e8e8e60006040516020015260405160e060020a63ffffffff8c16028152600160a060020a03808b16600483019081528a821660248401528982166044840152888216606484015260a4830187905260c4830186905284151560e48401529083166101048301526101206084830190815290916101240187818151815260200191508051906020019080838360005b838110156127eb5780820151838201526020016127d3565b50505050905090810190601f1680156128185780820380516001836020036101000a031916815260200191505b509a5050505050505050505050602060405180830381600087803b151561283e57600080fd5b6102c65a03f1151561284f57600080fd5b5050506040518051905091506007600083600160a060020a0316600160a060020a031681526020019081526020016000209050338160000160006101000a815481600160a060020a030219169083600160a060020a031602179055508a8160020160006101000a815481600160a060020a030219169083600160a060020a03160217905550898160030160006101000a815481600160a060020a030219169083600160a060020a031602179055508b8160010160006101000a815481600160a060020a030219169083600160a060020a031602179055508281600401819055508b600160a060020a031663788e36ac838a8e8e60006040516020015260405160e060020a63ffffffff8716028152600160a060020a039485166004820152602481019390935290831660448301529091166064820152608401602060405180830381600087803b15156129a157600080fd5b6102c65a03f115156129b257600080fd5b5050506040518051905015156129c757600080fd5b89600160a060020a03168b600160a060020a03168d600160a060020a03167fb4f08af90e2047b3d94916c1ec984497053d09c7fd2961f9a933989ea7b3bd328533604051600160a060020a039283168152911660208201526040908101905180910390a4509a9950505050505050505050565b600082821115612a4657fe5b50900390565b600160a060020a038216600090815260056020526040812054612a75908363ffffffff612bf916565b600160a060020a03841660009081526005602052604090819020919091557f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc9908490849051600160a060020a03909216825260208201526040908101905180910390a150600192915050565b600160a060020a038216600090815260056020526040812054612b0a908363ffffffff612a3a16565b600160a060020a038416600090815260056020526040902090815560010154612b39908363ffffffff612bf916565b600160a060020a0384166000908152600560205260409020600190810191909155905092915050565b6000818310612b715781612b73565b825b9392505050565b600160a060020a038216600090815260056020526040812060010154612ba6908363ffffffff612a3a16565b600160a060020a0384166000908152600560205260409020600181019190915554612bd7908363ffffffff612bf916565b600160a060020a03841660009081526005602052604090205550600192915050565b600082820183811015612b7357fe00a165627a7a723058200f658619bdcc2f613df1b49d5be63eafb978aa1b8e6713e0ac5e0c37d601bc160029";

    protected IexecHub(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected IexecHub(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<TaskRequestEventResponse> getTaskRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskRequest", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskRequestEventResponse> responses = new ArrayList<TaskRequestEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskRequestEventResponse typedResponse = new TaskRequestEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.dataset = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.taskRequestOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskRequestEventResponse> taskRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskRequest", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskRequestEventResponse>() {
            @Override
            public TaskRequestEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskRequestEventResponse typedResponse = new TaskRequestEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.app = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.dataset = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.taskRequestOwner = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskAcceptedEventResponse> getTaskAcceptedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskAcceptedEventResponse> responses = new ArrayList<TaskAcceptedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskAcceptedEventResponse> taskAcceptedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskAcceptedEventResponse>() {
            @Override
            public TaskAcceptedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskCancelledEventResponse> getTaskCancelledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskCancelled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskCancelledEventResponse> responses = new ArrayList<TaskCancelledEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskCancelledEventResponse typedResponse = new TaskCancelledEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskCancelledEventResponse> taskCancelledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskCancelled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskCancelledEventResponse>() {
            @Override
            public TaskCancelledEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskCancelledEventResponse typedResponse = new TaskCancelledEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskAbortedEventResponse> getTaskAbortedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskAborted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskAbortedEventResponse> responses = new ArrayList<TaskAbortedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskAbortedEventResponse typedResponse = new TaskAbortedEventResponse();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskAbortedEventResponse> taskAbortedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskAborted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskAbortedEventResponse>() {
            @Override
            public TaskAbortedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskAbortedEventResponse typedResponse = new TaskAbortedEventResponse();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskCompletedEventResponse> getTaskCompletedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskCompletedEventResponse> responses = new ArrayList<TaskCompletedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskCompletedEventResponse typedResponse = new TaskCompletedEventResponse();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskCompletedEventResponse> taskCompletedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskCompleted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskCompletedEventResponse>() {
            @Override
            public TaskCompletedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskCompletedEventResponse typedResponse = new TaskCompletedEventResponse();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateWorkerPoolEventResponse> getCreateWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateWorkerPoolEventResponse> responses = new ArrayList<CreateWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
            typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateWorkerPoolEventResponse> createWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateWorkerPoolEventResponse>() {
            @Override
            public CreateWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateWorkerPoolEventResponse typedResponse = new CreateWorkerPoolEventResponse();
                typedResponse.workerPoolOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OpenWorkerPoolEventResponse> getOpenWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OpenWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OpenWorkerPoolEventResponse> responses = new ArrayList<OpenWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OpenWorkerPoolEventResponse typedResponse = new OpenWorkerPoolEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OpenWorkerPoolEventResponse> openWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OpenWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OpenWorkerPoolEventResponse>() {
            @Override
            public OpenWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OpenWorkerPoolEventResponse typedResponse = new OpenWorkerPoolEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CloseWorkerPoolEventResponse> getCloseWorkerPoolEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CloseWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CloseWorkerPoolEventResponse> responses = new ArrayList<CloseWorkerPoolEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CloseWorkerPoolEventResponse typedResponse = new CloseWorkerPoolEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CloseWorkerPoolEventResponse> closeWorkerPoolEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CloseWorkerPool", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CloseWorkerPoolEventResponse>() {
            @Override
            public CloseWorkerPoolEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CloseWorkerPoolEventResponse typedResponse = new CloseWorkerPoolEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkerPoolUnsubscriptionEventResponse> getWorkerPoolUnsubscriptionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolUnsubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolUnsubscriptionEventResponse> responses = new ArrayList<WorkerPoolUnsubscriptionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolUnsubscriptionEventResponse> workerPoolUnsubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolUnsubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolUnsubscriptionEventResponse>() {
            @Override
            public WorkerPoolUnsubscriptionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolUnsubscriptionEventResponse typedResponse = new WorkerPoolUnsubscriptionEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<WorkerPoolSubscriptionEventResponse> getWorkerPoolSubscriptionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolSubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolSubscriptionEventResponse> responses = new ArrayList<WorkerPoolSubscriptionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
            typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolSubscriptionEventResponse> workerPoolSubscriptionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolSubscription", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolSubscriptionEventResponse>() {
            @Override
            public WorkerPoolSubscriptionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolSubscriptionEventResponse typedResponse = new WorkerPoolSubscriptionEventResponse();
                typedResponse.workerPool = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<FaultyContributionEventResponse> getFaultyContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("FaultyContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<FaultyContributionEventResponse> responses = new ArrayList<FaultyContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FaultyContributionEventResponse> faultyContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("FaultyContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, FaultyContributionEventResponse>() {
            @Override
            public FaultyContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                FaultyContributionEventResponse typedResponse = new FaultyContributionEventResponse();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AccurateContributionEventResponse> getAccurateContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccurateContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccurateContributionEventResponse> responses = new ArrayList<AccurateContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccurateContributionEventResponse> accurateContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccurateContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccurateContributionEventResponse>() {
            @Override
            public AccurateContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccurateContributionEventResponse typedResponse = new AccurateContributionEventResponse();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.taskID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Deposit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DepositEventResponse> depositEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Deposit", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Withdraw", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawEventResponse> withdrawEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Withdraw", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<RewardEventResponse> getRewardEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Reward", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RewardEventResponse> responses = new ArrayList<RewardEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RewardEventResponse typedResponse = new RewardEventResponse();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RewardEventResponse> rewardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Reward", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RewardEventResponse>() {
            @Override
            public RewardEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RewardEventResponse typedResponse = new RewardEventResponse();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SeizeEventResponse> getSeizeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Seize", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SeizeEventResponse> responses = new ArrayList<SeizeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SeizeEventResponse typedResponse = new SeizeEventResponse();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SeizeEventResponse> seizeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Seize", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SeizeEventResponse>() {
            @Override
            public SeizeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SeizeEventResponse typedResponse = new SeizeEventResponse();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple5<String, String, String, String, BigInteger>> m_taskInfos(String param0) {
        final Function function = new Function("m_taskInfos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, BigInteger>>(
                new Callable<Tuple5<String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _amount) {
        Function function = new Function(
                "withdraw", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getTaskCost(String _taskID) {
        Function function = new Function("getTaskCost", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> finalizedTask(String _taskID, String _stdout, String _stderr, String _uri) {
        Function function = new Function(
                "finalizedTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> checkBalance(String _owner) {
        final Function function = new Function("checkBalance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> openCloseWorkerPool(String _workerPool, Boolean open) {
        Function function = new Function(
                "openCloseWorkerPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool), 
                new org.web3j.abi.datatypes.Bool(open)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createWorkerPool(String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        Function function = new Function(
                "createWorkerPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_scores(String param0) {
        Function function = new Function("m_scores", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> cancelTask(String _taskID) {
        Function function = new Function(
                "cancelTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockForTask(String _taskID, String _user, BigInteger _amount) {
        Function function = new Function(
                "lockForTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> seizeForTask(String _taskID, String _worker, BigInteger _amount) {
        Function function = new Function(
                "seizeForTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _taskID) {
        Function function = new Function(
                "claimFailedConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unlockForTask(String _taskID, String _user, BigInteger _amount) {
        Function function = new Function(
                "unlockForTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unsubscribeToPool(String _workerPool, String _worker) {
        Function function = new Function(
                "unsubscribeToPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool), 
                new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createAppOrDataset(String _name, BigInteger _price, String _param, String _uri, Boolean _isApp) {
        Function function = new Function(
                "createAppOrDataset", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_price), 
                new org.web3j.abi.datatypes.Utf8String(_param), 
                new org.web3j.abi.datatypes.Utf8String(_uri), 
                new org.web3j.abi.datatypes.Bool(_isApp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> rlc() {
        Function function = new Function("rlc", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> subscribeToPool(String _workerPool) {
        Function function = new Function(
                "subscribeToPool", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger _amount) {
        Function function = new Function(
                "deposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> m_accounts(String param0) {
        final Function function = new Function("m_accounts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> rewardForTask(String _taskID, String _worker, BigInteger _amount) {
        Function function = new Function(
                "rewardForTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptTask(String _taskID) {
        Function function = new Function(
                "acceptTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> getWorkerStatus(String _worker) {
        final Function function = new Function("getWorkerStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createTaskRequest(String _workerPool, String _app, String _dataset, String _taskParam, BigInteger _taskCost, BigInteger _askedTrust, Boolean _dappCallback, String _beneficiary) {
        Function function = new Function(
                "createTaskRequest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_workerPool), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset), 
                new org.web3j.abi.datatypes.Utf8String(_taskParam), 
                new org.web3j.abi.datatypes.generated.Uint256(_taskCost), 
                new org.web3j.abi.datatypes.generated.Uint256(_askedTrust), 
                new org.web3j.abi.datatypes.Bool(_dappCallback), 
                new org.web3j.abi.datatypes.Address(_beneficiary)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _workerPoolHubAddress, String _appHubAddress, String _datasetHubAddress, String _taskRequestHubAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_workerPoolHubAddress), 
                new org.web3j.abi.datatypes.Address(_appHubAddress), 
                new org.web3j.abi.datatypes.Address(_datasetHubAddress), 
                new org.web3j.abi.datatypes.Address(_taskRequestHubAddress)));
        return deployRemoteCall(IexecHub.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<IexecHub> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _tokenAddress, String _workerPoolHubAddress, String _appHubAddress, String _datasetHubAddress, String _taskRequestHubAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_workerPoolHubAddress), 
                new org.web3j.abi.datatypes.Address(_appHubAddress), 
                new org.web3j.abi.datatypes.Address(_datasetHubAddress), 
                new org.web3j.abi.datatypes.Address(_taskRequestHubAddress)));
        return deployRemoteCall(IexecHub.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static IexecHub load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static IexecHub load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new IexecHub(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class TaskRequestEventResponse {
        public String workerPool;

        public String app;

        public String dataset;

        public String taskID;

        public String taskRequestOwner;
    }

    public static class TaskAcceptedEventResponse {
        public String workerPool;

        public String taskID;
    }

    public static class TaskCancelledEventResponse {
        public String workerPool;

        public String taskID;
    }

    public static class TaskAbortedEventResponse {
        public String taskID;

        public String workerPool;
    }

    public static class TaskCompletedEventResponse {
        public String taskID;

        public String workerPool;
    }

    public static class CreateWorkerPoolEventResponse {
        public String workerPoolOwner;

        public String workerPool;

        public String name;
    }

    public static class OpenWorkerPoolEventResponse {
        public String workerPool;
    }

    public static class CloseWorkerPoolEventResponse {
        public String workerPool;
    }

    public static class WorkerPoolUnsubscriptionEventResponse {
        public String workerPool;

        public String worker;
    }

    public static class WorkerPoolSubscriptionEventResponse {
        public String workerPool;

        public String worker;
    }

    public static class FaultyContributionEventResponse {
        public String worker;

        public String taskID;
    }

    public static class AccurateContributionEventResponse {
        public String worker;

        public String taskID;
    }

    public static class DepositEventResponse {
        public String owner;

        public BigInteger amount;
    }

    public static class WithdrawEventResponse {
        public String owner;

        public BigInteger amount;
    }

    public static class RewardEventResponse {
        public String user;

        public BigInteger amount;
    }

    public static class SeizeEventResponse {
        public String user;

        public BigInteger amount;
    }
}
