package com.iexec.scheduler.contracts.generated;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class WorkerPool extends Contract {
    private static final String BINARY = "";

    protected WorkerPool(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WorkerPool(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<WorkerPoolPolicyUpdateEventResponse> getWorkerPoolPolicyUpdateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolPolicyUpdateEventResponse> responses = new ArrayList<WorkerPoolPolicyUpdateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
            typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolPolicyUpdateEventResponse> workerPoolPolicyUpdateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolPolicyUpdateEventResponse>() {
            @Override
            public WorkerPoolPolicyUpdateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
                typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskReceivedEventResponse> getTaskReceivedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskReceivedEventResponse> responses = new ArrayList<TaskReceivedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskReceivedEventResponse typedResponse = new TaskReceivedEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskReceivedEventResponse> taskReceivedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskReceivedEventResponse>() {
            @Override
            public TaskReceivedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskReceivedEventResponse typedResponse = new TaskReceivedEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskAcceptedEventResponse> getTaskAcceptedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskAcceptedEventResponse> responses = new ArrayList<TaskAcceptedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskAcceptedEventResponse> taskAcceptedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskAcceptedEventResponse>() {
            @Override
            public TaskAcceptedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskCanceledEventResponse> getTaskCanceledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskCanceled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskCanceledEventResponse> responses = new ArrayList<TaskCanceledEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskCanceledEventResponse typedResponse = new TaskCanceledEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskCanceledEventResponse> taskCanceledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskCanceled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskCanceledEventResponse>() {
            @Override
            public TaskCanceledEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskCanceledEventResponse typedResponse = new TaskCanceledEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CallForContributionEventResponse> getCallForContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CallForContributionEventResponse> responses = new ArrayList<CallForContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CallForContributionEventResponse> callForContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CallForContributionEventResponse>() {
            @Override
            public CallForContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ContributeEventResponse> getContributeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContributeEventResponse> responses = new ArrayList<ContributeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContributeEventResponse typedResponse = new ContributeEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContributeEventResponse> contributeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContributeEventResponse>() {
            @Override
            public ContributeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContributeEventResponse typedResponse = new ContributeEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealConsensusEventResponse> getRevealConsensusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealConsensusEventResponse> responses = new ArrayList<RevealConsensusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealConsensusEventResponse> revealConsensusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealConsensusEventResponse>() {
            @Override
            public RevealConsensusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealEventResponse> getRevealEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealEventResponse> responses = new ArrayList<RevealEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealEventResponse typedResponse = new RevealEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pocoStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealEventResponse> revealEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealEventResponse>() {
            @Override
            public RevealEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealEventResponse typedResponse = new RevealEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pocoStatus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> contribute(String _taskID, byte[] _resultHash, byte[] _resultSign, BigInteger _v, byte[] _r, byte[] _s) {
        Function function = new Function(
                "contribute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultSign), 
                new org.web3j.abi.datatypes.generated.Uint8(_v), 
                new org.web3j.abi.datatypes.generated.Bytes32(_r), 
                new org.web3j.abi.datatypes.generated.Bytes32(_s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> revealConsensus(String _taskID, byte[] _consensus) {
        Function function = new Function(
                "revealConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_consensus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isAppAllowed(String _app) {
        Function function = new Function(
                "isAppAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_app)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_workers(BigInteger param0) {
        Function function = new Function("m_workers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_workersAuthorizedListAddress() {
        Function function = new Function("m_workersAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_appsAuthorizedListAddress() {
        Function function = new Function("m_appsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> callForContribution(String _taskID, String _worker, String _enclaveChallenge) {
        Function function = new Function(
                "callForContribution", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.Address(_enclaveChallenge)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_workerIndex(String param0) {
        Function function = new Function("m_workerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> finalizedTask(String _taskID, String _stdout, String _stderr, String _uri) {
        Function function = new Function(
                "finalizedTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOpen() {
        Function function = new Function("isOpen", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> switchOnOff(Boolean onoff) {
        Function function = new Function(
                "switchOnOff", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(onoff)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> reveal(String _taskID, byte[] _result) {
        Function function = new Function(
                "reveal", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_result)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>> getWorkInfo(String _taskID) {
        final Function function = new Function("getWorkInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumStakePolicy() {
        Function function = new Function("m_subscriptionMinimumStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> m_datasetsAuthorizedListAddress() {
        Function function = new Function("m_datasetsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isWorkerAllowed(String _worker) {
        Function function = new Function("isWorkerAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> cancelTask(String _taskID) {
        Function function = new Function(
                "cancelTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> receivedTask(String _taskID, BigInteger _taskCost, String _app, String _dataset) {
        Function function = new Function(
                "receivedTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Uint256(_taskCost), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addWorker(String _worker) {
        Function function = new Function(
                "addWorker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeWorkerPoolPolicy(BigInteger _newStakeRatioPolicy, BigInteger _newSchedulerRewardRatioPolicy, BigInteger _newResultRetentionPolicy, BigInteger _newSubscriptionMinimumStakePolicy, BigInteger _newSubscriptionMinimumScorePolicy) {
        Function function = new Function(
                "changeWorkerPoolPolicy", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newStakeRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSchedulerRewardRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newResultRetentionPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_schedulerRewardRatioPolicy() {
        Function function = new Function("m_schedulerRewardRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _taskID) {
        Function function = new Function(
                "claimFailedConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getWorkerPoolOwner() {
        Function function = new Function("getWorkerPoolOwner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isDatasetAllowed(String _dataset) {
        Function function = new Function("isDatasetAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getWorkerAddress(BigInteger _index) {
        Function function = new Function("getWorkerAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>> m_WorkInfos(String param0) {
        final Function function = new Function("m_WorkInfos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<String> m_name() {
        Function function = new Function("m_name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeWorker(String _worker) {
        Function function = new Function(
                "removeWorker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_stakeRatioPolicy() {
        Function function = new Function("m_stakeRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkersCount() {
        Function function = new Function("getWorkersCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumScorePolicy() {
        Function function = new Function("m_subscriptionMinimumScorePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, byte[], byte[], String>> m_tasksContributions(String param0, String param1) {
        final Function function = new Function("m_tasksContributions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<BigInteger, byte[], byte[], String>>(
                new Callable<Tuple4<BigInteger, byte[], byte[], String>>() {
                    @Override
                    public Tuple4<BigInteger, byte[], byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<BigInteger, byte[], byte[], String>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m_workerPoolStatus() {
        Function function = new Function("m_workerPoolStatus", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> acceptTask(String _taskID) {
        Function function = new Function(
                "acceptTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_owner() {
        Function function = new Function("m_owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> m_subscriptionLockStakePolicy() {
        Function function = new Function("m_subscriptionLockStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkerIndex(String _worker) {
        Function function = new Function("getWorkerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> REVEAL_PERIOD_DURATION() {
        Function function = new Function("REVEAL_PERIOD_DURATION", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> CONSENSUS_DURATION_LIMIT() {
        Function function = new Function("CONSENSUS_DURATION_LIMIT", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> reopen(String _taskID) {
        Function function = new Function(
                "reopen", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class WorkerPoolPolicyUpdateEventResponse {
        public BigInteger oldStakeRatioPolicy;

        public BigInteger newStakeRatioPolicy;

        public BigInteger oldSchedulerRewardRatioPolicy;

        public BigInteger newSchedulerRewardRatioPolicy;

        public BigInteger oldSubscriptionMinimumStakePolicy;

        public BigInteger newSubscriptionMinimumStakePolicy;

        public BigInteger oldSubscriptionMinimumScorePolicy;

        public BigInteger newSubscriptionMinimumScorePolicy;
    }

    public static class TaskReceivedEventResponse {
        public String taskID;
    }

    public static class TaskAcceptedEventResponse {
        public String taskID;
    }

    public static class TaskCanceledEventResponse {
        public String taskID;
    }

    public static class CallForContributionEventResponse {
        public String taskID;

        public String worker;

        public BigInteger workerScore;
    }

    public static class ContributeEventResponse {
        public String taskID;

        public String worker;

        public byte[] resultHash;
    }

    public static class RevealConsensusEventResponse {
        public String taskID;

        public byte[] consensus;
    }

    public static class RevealEventResponse {
        public String taskID;

        public String worker;

        public byte[] result;

        public BigInteger pocoStatus;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
