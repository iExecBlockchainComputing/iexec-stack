package com.iexec.scheduler.contracts.generated;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class WorkerPool extends Contract {
    private static final String BINARY = "606060405234156200001057600080fd5b6040516200364c3803806200364c8339810160405280805191906020018051820191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a0390811691909117909155909250869150811615156200007b57600080fd5b60018054600160a060020a03928316600160a060020a03199182168117909255600280549091169091179055328116339091161415620000ba57600080fd5b620000d33264010000000062001ec2620003b982021704565b6003848051620000e892916020019062000449565b50601e600455600160058190556006849055600783905560088290556009805460ff19169055600c8054600160a060020a03191633600160a060020a031617905562000133620004ce565b808260018111156200014157fe5b60ff168152602001915050604051809103906000f08015156200016357600080fd5b600d8054600160a060020a031916600160a060020a039290921691909117905560016200018f620004ce565b808260018111156200019d57fe5b60ff168152602001915050604051809103906000f0801515620001bf57600080fd5b600e8054600160a060020a031916600160a060020a03929092169190911790556000620001eb620004ce565b80826001811115620001f957fe5b60ff168152602001915050604051809103906000f08015156200021b57600080fd5b600f8054600160a060020a031916600160a060020a03928316179055600d541663f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200029957600080fd5b6102c65a03f11515620002ab57600080fd5b5050600e54600160a060020a0316905063f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200031957600080fd5b6102c65a03f115156200032b57600080fd5b5050600f54600160a060020a0316905063f2fde38b326040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200039957600080fd5b6102c65a03f11515620003ab57600080fd5b5050505050505050620004ff565b60005433600160a060020a03908116911614620003d557600080fd5b600160a060020a0381161515620003eb57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048c57805160ff1916838001178555620004bc565b82800160010185558215620004bc579182015b82811115620004bc5782518255916020019190600101906200049f565b50620004ca929150620004df565b5090565b6040516107938062002eb983390190565b620004fc91905b80821115620004ca5760008155600101620004e6565b90565b6129aa806200050f6000396000f3006060604052600436106101ea5763ffffffff60e060020a600035041663031ee1c881146101ef5780630c6e29e31461023257806316ebf77d1461025957806321e6d3d51461027b5780632b8fd18a1461029a578063323e17b4146102cc5780634096c23d146102df57806341aff32c146102f257806341cb01ad1461031d57806344aaedb81461033c57806347535d7b1461041f578063522bd042146104325780635a6285251461044a5780635bb4de2f1461046c5780636a7ea10a1461047f5780636ab6936a146104ed5780636bad89a51461050057806371a0c8c31461051357806376aafbdb14610532578063788e36ac1461055157806383046b1014610580578063835436b4146105a457806387639c68146105c357806389869163146105d65780638daa4caf146105f55780638f384d3914610608578063900b7b6214610627578063ae17c65a1461063d578063b889dc8d146106b1578063c6c5b0721461073b578063c6ced32b1461074e578063cc6f06a314610761578063ce39fbc814610774578063d2afa716146107dc578063deba350f14610813578063deff41c114610832578063e2d36ef514610845578063ec1847b614610858578063f27f7be114610877578063f2fde38b1461088a578063fceeccb6146108a9578063ff266d26146108bc575b600080fd5b34156101fa57600080fd5b610220600160a060020a036004351660243560443560ff6064351660843560a4356108db565b60405190815260200160405180910390f35b341561023d57600080fd5b610245610b5c565b604051901515815260200160405180910390f35b341561026457600080fd5b610245600160a060020a0360043516602435610c24565b341561028657600080fd5b610245600160a060020a0360043516610d87565b34156102a557600080fd5b6102b0600435610e02565b604051600160a060020a03909116815260200160405180910390f35b34156102d757600080fd5b6102b0610e2a565b34156102ea57600080fd5b6102b0610e39565b34156102fd57600080fd5b610245600160a060020a0360043581169060243581169060443516610e48565b341561032857600080fd5b610220600160a060020a036004351661100b565b341561034757600080fd5b61024560048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061101d95505050505050565b341561042a57600080fd5b61024561137a565b341561043d57600080fd5b6102456004351515611395565b341561045557600080fd5b610245600160a060020a0360043516602435611418565b341561047757600080fd5b610245611584565b341561048a57600080fd5b61049e600160a060020a036004351661160e565b604051808860078111156104ae57fe5b60ff1681526020810197909752506040808701959095526060860193909352608085019190915260a084015260c083015260e090910191505180910390f35b34156104f857600080fd5b610220611658565b341561050b57600080fd5b6102b061165e565b341561051e57600080fd5b610245600160a060020a036004351661166d565b341561053d57600080fd5b610245600160a060020a03600435166116c8565b341561055c57600080fd5b610245600160a060020a036004358116906024359060443581169060643516611767565b341561058b57600080fd5b6105a2600435602435604435606435608435611842565b005b34156105af57600080fd5b610245600160a060020a03600435166118e9565b34156105ce57600080fd5b610220611998565b34156105e157600080fd5b610245600160a060020a036004351661199e565b341561060057600080fd5b6102b0611b54565b341561061357600080fd5b610245600160a060020a0360043516611b63565b341561063257600080fd5b6102b0600435611bbe565b341561064857600080fd5b61065c600160a060020a0360043516611bea565b6040518089600781111561066c57fe5b60ff1681526020810198909852506040808801969096526060870194909452608086019290925260a085015260c084015260e083015261010090910191505180910390f35b34156106bc57600080fd5b6106c4611c31565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156107005780820151838201526020016106e8565b50505050905090810190601f16801561072d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561074657600080fd5b610220611ccf565b341561075957600080fd5b610220611cd5565b341561076c57600080fd5b610220611cdb565b341561077f57600080fd5b610799600160a060020a0360043581169060243516611ce1565b604051808560048111156107a957fe5b60ff168152602081019490945250604080840192909252600160a060020a03166060830152608090910191505180910390f35b34156107e757600080fd5b6107ef611d20565b604051808260018111156107ff57fe5b60ff16815260200191505060405180910390f35b341561081e57600080fd5b610245600160a060020a0360043516611d29565b341561083d57600080fd5b6102b0611e57565b341561085057600080fd5b610220611e66565b341561086357600080fd5b610220600160a060020a0360043516611e6c565b341561088257600080fd5b610220611ebc565b341561089557600080fd5b6105a2600160a060020a0360043516611ec2565b34156108b457600080fd5b610220611f50565b34156108c757600080fd5b610245600160a060020a0360043516611f57565b600160a060020a0386166000908152601060205260408120816004825460ff16600781111561090657fe5b1461091057600080fd5b50600160a060020a0380891660009081526011602090815260408083203390941683529290522087151561094357600080fd5b86151561094f57600080fd5b6003810154600160a060020a0316156109ff57600187891860405190815260200160405180910390208787876040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f115156109da57600080fd5b5050602060405103516003820154600160a060020a039081169116146109ff57600080fd5b6001815460ff166004811115610a1157fe5b14610a1b57600080fd5b805460ff19166002908117825560018083018a905590820188905560078301805490918101610a4a8382612929565b50600091825260208220018054600160a060020a03191633600160a060020a03818116929092179092556002805490860154911692638537c515928d9290916040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610adf57600080fd5b6102c65a03f11515610af057600080fd5b505050604051805190501515610b0557600080fd5b33600160a060020a031689600160a060020a03167f1593a9a000265660fd299c9f8c9bbacfeb4d428861542e6c44b68615324225d48a60405190815260200160405180910390a35060020154979650505050505050565b6002546000908190600160a060020a0316630c6e29e382604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ba857600080fd5b6102c65a03f11515610bb957600080fd5b505050604051805190501515610bce57600080fd5b600a805460018101610be08382612929565b60009283526020808420929092018054600160a060020a03191632600160a060020a03169081179091558352600b90915260409091208190556001925090505b5090565b6000805481908190819033600160a060020a03908116911614610c4657600080fd5b600160a060020a038616600090815260106020526040902092506004835460ff166007811115610c7257fe5b14610c7c57600080fd5b60006008840181905591505b6007830154821015610d095760078301805483908110610ca457fe5b6000918252602080832090910154600160a060020a03898116845260118352604080852091909216808552925290912060010154909150851415610cfe576008830154610cf890600163ffffffff61208e16565b60088401555b816001019150610c88565b600883015460009011610d1b57600080fd5b825460ff1916600517835560038301859055610d39612a304261208e565b6004840155600160a060020a0386167fa1b9f527f9799a46d54103401c99dc62f3744afe1d095a1c53620758dc38b2868660405190815260200160405180910390a250600195945050505050565b600d54600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610de257600080fd5b6102c65a03f11515610df357600080fd5b50505060405180519392505050565b600a805482908110610e1057fe5b600091825260209091200154600160a060020a0316905081565b600f54600160a060020a031681565b600d54600160a060020a031681565b60008054819081908190819033600160a060020a03908116911614610e6c57600080fd5b600160a060020a03808916600090815260106020908152604080832060118352818420948c16845293909152902090945092506004845460ff166007811115610eb157fe5b1480610ecc57506003845460ff166007811115610eca57fe5b145b1515610ed757600080fd5b835460ff19166004178455600254600160a060020a031663f69f190c8860006040516040015260405160e060020a63ffffffff8416028152600160a060020a0390911660048201526024016040805180830381600087803b1515610f3a57600080fd5b6102c65a03f11515610f4b57600080fd5b50505060405180519060200180519193509091505030600160a060020a0390811690831614610f7957600080fd5b6000835460ff166004811115610f8b57fe5b14610f9557600080fd5b825460ff19166001178355600383018054600160a060020a03888116600160a060020a0319909216919091179091558781169089167fd8543c5d4025e941c30ead4b7da9861c3050452ebfb6c360972d772b5ab67e538360405190815260200160405180910390a3506001979650505050505050565b600b6020526000908152604090205481565b60008054819033600160a060020a0390811691161461103b57600080fd5b50600160a060020a03851660009081526010602052604090206005815460ff16600781111561106657fe5b1461107057600080fd5b42816004015411158015611088575060008160050154115b8061109a575080600801548160050154145b15156110a557600080fd5b805460ff1916600717815561119a86826101206040519081016040528154909190829060ff1660078111156110d657fe5b60078111156110e157fe5b815260200160018201548152602001600282015481526020016003820154600019166000191681526020016004820154815260200160058201548152602001600682015481526020016007820180548060200260200160405190810160405280929190818152602001828054801561118257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611164575b505050505081526020016008820154815250506120a8565b15156111a557600080fd5b600254600160a060020a03166344aaedb8878787876000604051602001526040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561123257808201518382015260200161121a565b50505050905090810190601f16801561125f5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561129557808201518382015260200161127d565b50505050905090810190601f1680156112c25780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156112f85780820151838201526020016112e0565b50505050905090810190601f1680156113255780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b151561134857600080fd5b6102c65a03f1151561135957600080fd5b50505060405180519050151561136e57600080fd5b50600195945050505050565b60008060095460ff16600181111561138e57fe5b1490505b90565b60015460009033600160a060020a039081169116146113b357600080fd5b81156113e557600160095460ff1660018111156113cc57fe5b146113d657600080fd5b6009805460ff19169055611410565b600060095460ff1660018111156113f857fe5b1461140257600080fd5b6009805460ff191660011790555b506001919050565b600160a060020a03808316600090815260106020908152604080832060118352818420339095168452939091528120600483015491929142901161145b57600080fd5b6005825460ff16600781111561146d57fe5b1461147757600080fd5b6002815460ff16600481111561148957fe5b1461149357600080fd5b60038201546001820154146114a757600080fd5b836040519081526020016040519081900390206001820154146114c957600080fd5b33604051600160a060020a03919091166c010000000000000000000000000281526014016040518091039020841860405190815260200160405190819003902060028201541461151857600080fd5b805460ff19166003178155600582015461153390600161208e565b6005830155600160a060020a033381169086167f4f5df7005a83b6f11e90ead1268eb534656169a5034e8d239c763471294be3d58660405190815260200160405180910390a3506001949350505050565b600254600090600160a060020a0316635bb4de2f82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156115ce57600080fd5b6102c65a03f115156115df57600080fd5b5050506040518051905015156115f457600080fd5b6115fd326125d1565b151561160857600080fd5b50600190565b600160a060020a0316600090815260106020526040902080546001820154600283015460038401546004850154600586015460069096015460ff9095169693959294919390929190565b60075481565b600e54600160a060020a031681565b600f54600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610de257600080fd5b600154600090819033600160a060020a039081169116146116e857600080fd5b50600160a060020a03821660009081526010602052604090206001815460ff16600781111561171357fe5b1461171d57600080fd5b805460ff19166002178155600160a060020a0383167f90e34e25d6f272451452f2463983ed66867d16924d44117c5c71f68f79d54b4860405160405180910390a250600192915050565b600154600090819033600160a060020a0390811691161461178757600080fd5b61178f61137a565b151561179a57600080fd5b6117a384610d87565b15156117ae57600080fd5b6117b783611b63565b15156117c257600080fd5b50600160a060020a0385166000908152601060205260409020805460ff19166001908117825581018590556004546117fb90869061268a565b6002820155600160a060020a0386167faeae388810019c8cefc91b591f41c148e1fcfaed530cd7aacf1833296a3c797360405160405180910390a250600195945050505050565b60005433600160a060020a0390811691161461185d57600080fd5b7f52bb55d3097463659f724f9b420d259719787a8563b48eb82368680999bfea0760045486600554876007548760085488604051808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390a160049490945560059290925550600755600855565b6000805433600160a060020a0390811691161461190557600080fd5b600254600160a060020a031663835436b48360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561195e57600080fd5b6102c65a03f1151561196f57600080fd5b50505060405180519050151561198457600080fd5b61198d826125d1565b151561141057600080fd5b60055481565b60015460009081908190819033600160a060020a039081169116146119c257600080fd5b600160a060020a038516600090815260106020526040902092506004835460ff1660078111156119ee57fe5b1480611a0957506003835460ff166007811115611a0757fe5b145b1515611a1457600080fd5b60068301544211611a2457600080fd5b825460ff19166006178355600091505b6007830154821015611b495760078301805483908110611a5057fe5b600091825260209091200154600160a060020a031690506001600160a060020a0380871660009081526011602090815260408083209386168352929052205460ff166004811115611a9d57fe5b14611b3e576002805490840154600160a060020a0390911690638d877dd3908790849060006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515611b1857600080fd5b6102c65a03f11515611b2957600080fd5b505050604051805190501515611b3e57600080fd5b816001019150611a34565b506001949350505050565b600054600160a060020a031690565b600e54600090600160a060020a031663361895c883836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610de257600080fd5b6000600a82815481101515611bcf57fe5b600091825260209091200154600160a060020a031692915050565b6010602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460089097015460ff909616969495939492939192909188565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cc75780601f10611c9c57610100808354040283529160200191611cc7565b820191906000526020600020905b815481529060010190602001808311611caa57829003601f168201915b505050505081565b60045481565b600a5490565b60085481565b6011602090815260009283526040808420909152908252902080546001820154600283015460039093015460ff909216929091600160a060020a031684565b60095460ff1681565b60008054819033600160a060020a03908116911614611d4757600080fd5b50600160a060020a03821660009081526010602052604090206001815460ff166007811115611d7257fe5b14611d7c57600080fd5b600254600160a060020a031663deba350f8460006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611dd557600080fd5b6102c65a03f11515611de657600080fd5b505050604051805190501515611dfb57600080fd5b805460ff19166003178155611e1362093a804261208e565b6006820155600160a060020a0383167fb97a5666e5ae6493f80630a27394b27ce868cf006774f9d591d8f11a4fafb5cf60405160405180910390a250600192915050565b600054600160a060020a031681565b60065481565b600160a060020a0381166000818152600b6020526040812054600a80549293919283908110611e9757fe5b600091825260209091200154600160a060020a031614611eb657600080fd5b92915050565b612a3081565b60005433600160a060020a03908116911614611edd57600080fd5b600160a060020a0381161515611ef257600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b62093a8081565b6000805481908190819033600160a060020a03908116911614611f7957600080fd5b600160a060020a038516600090815260106020526040902092506005835460ff166007811115611fa557fe5b14611faf57600080fd5b42836004015411158015611fc557506005830154155b1515611fd057600080fd5b600060088401819055835460ff19166004908117855560038501829055840181905591505b6007830154821015611b49576007830180548390811061201157fe5b60009182526020808320909101546003860154600160a060020a038981168552601184526040808620919093168086529352922060010154909250141561208357600160a060020a038581166000908152601160209081526040808320938516835292905220805460ff191660041790555b816001019150611ff5565b60008282018381101561209d57fe5b8091505b5092915050565b60008060008060008060008060006120be612952565b60008b6020015192508b60e001519150600099505b81518a101561226257818a815181106120e857fe5b9060200190602002015198506003600160a060020a03808f166000908152601160209081526040808320938e168352929052205460ff16600481111561212a57fe5b141561223f57600160a060020a038d811660009081526011602090815260408083208d8516845290915290206003015416151561216857600161216b565b60035b60025460ff919091169850600160a060020a031663f69f190c8a60006040516040015260405160e060020a63ffffffff8416028152600160a060020a0390911660048201526024016040805180830381600087803b15156121cb57600080fd5b6102c65a03f115156121dc57600080fd5b5050506040518051906020018051985061220891506122039050888a63ffffffff61269f16565b6126ca565b600101955061221d858763ffffffff61208e16565b600160a060020a038a1660009081526012602052604090208790559450612257565b6122548c60400151849063ffffffff61208e16565b92505b8960010199506120d3565b6000851161226f57600080fd5b61229561228860055460646128e390919063ffffffff16565b849063ffffffff61268a16565b9050600099505b81518a101561252c57818a815181106122b157fe5b9060200190602002015198506003600160a060020a03808f166000908152601160209081526040808320938e168352929052205460ff1660048111156122f357fe5b141561247857600160a060020a0389166000908152601260205260409020546123249082908763ffffffff6128f516565b9350612336838563ffffffff6128e316565b9250600260009054906101000a9004600160a060020a0316600160a060020a0316638d877dd38e8b8f6040015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156123bb57600080fd5b6102c65a03f115156123cc57600080fd5b5050506040518051905015156123e157600080fd5b600254600160a060020a031663ca44a11f8e8b8760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561244d57600080fd5b6102c65a03f1151561245e57600080fd5b50505060405180519050151561247357600080fd5b612521565b600260009054906101000a9004600160a060020a0316600160a060020a031663855e97708e8b8f6040015160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156124fb57600080fd5b6102c65a03f1151561250c57600080fd5b50505060405180519050151561252157600080fd5b89600101995061229c565b600254600160a060020a031663d57e3ffc8e328660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561259857600080fd5b6102c65a03f115156125a957600080fd5b5050506040518051905015156125be57600080fd5b5060019c9b505050505050505050505050565b6000806125dd83611e6c565b600a80549192509060001981019081106125f357fe5b600091825260209091200154600a8054600160a060020a03909216918390811061261957fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600a8054600019810190811061265457fe5b60009182526020909120018054600160a060020a0319169055600a805490612680906000198301612929565b5060019392505050565b6000612698838360646128f5565b9392505050565b6000808315156126b257600091506120a1565b508282028284828115156126c257fe5b041461209d57fe5b700100000000000000000000000000000000680100000000000000006401000000006201000061010060106004600260001989019081041790810417908104179081041790810417908104179081041790810417600101906000906040517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a827252361660408201527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e082015261010081016040527e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff7f01000000000000000000000000000000000000000000000000000000000000008082870204818160ff038501510495507f8000000000000000000000000000000000000000000000000000000000000000851161010002860195505050505050919050565b6000828211156128ef57fe5b50900390565b600061290a612904858561269f565b83612912565b949350505050565b600080828481151561292057fe5b04949350505050565b81548183558181151161294d5760008381526020902061294d918101908301612964565b505050565b60206040519081016040526000815290565b61139291905b80821115610c20576000815560010161296a5600a165627a7a72305820257bae561251de5b63eefcfa822187e1884d51c01624be78658e9fe318f1ee4a00296060604052341561000f57600080fd5b6040516020806107938339810160405280805160008054600160a060020a03191633600160a060020a0316178082559193508392509060a060020a60ff0219167401000000000000000000000000000000000000000083600181111561007157fe5b02179055505061070d806100866000396000f3006060604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d392cd981146100c9578063361895c8146100ef5780633af32abf1461012257806349c0a824146101415780636c2e5bd2146101605780639155e0831461017f578063aff177ca146101a3578063bb0e69e8146101f6578063d821906d14610249578063deff41c114610262578063ed6a596514610291578063f2fde38b146102b0578063f6117546146102cf575b600080fd5b34156100d457600080fd5b6100ed600160a060020a03600435166024351515610306565b005b34156100fa57600080fd5b61010e600160a060020a0360043516610392565b604051901515815260200160405180910390f35b341561012d57600080fd5b61010e600160a060020a03600435166103d5565b341561014c57600080fd5b61010e600160a060020a03600435166103f3565b341561016b57600080fd5b61010e600160a060020a0360043516610408565b341561018a57600080fd5b6100ed600160a060020a0360043516602435151561041d565b34156101ae57600080fd5b6100ed60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506104a99050565b341561020157600080fd5b6100ed60046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505050509135151591506104fe9050565b341561025457600080fd5b6100ed60ff6004351661054e565b341561026d57600080fd5b610275610609565b604051600160a060020a03909116815260200160405180910390f35b341561029c57600080fd5b61010e600160a060020a0360043516610618565b34156102bb57600080fd5b6100ed600160a060020a0360043516610636565b34156102da57600080fd5b6102e26106d1565b604051808260018111156102f257fe5b60ff16815260200191505060405180910390f35b60005433600160a060020a0390811691161461032157600080fd5b600160a060020a03821660009081526001602052604090819020805460ff19168315151790557f3f50d04114467f3ca25c50f1540e2864f8a852c0380bbbbb603ebfda10b5baf2908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60008060005460a060020a900460ff1660018111156103ad57fe5b14156103c3576103bc826103d5565b90506103d0565b6103cc82610618565b1590505b919050565b600160a060020a031660009081526001602052604090205460ff1690565b60026020526000908152604090205460ff1681565b60016020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461043857600080fd5b600160a060020a03821660009081526002602052604090819020805460ff19168315151790557f739f0e2acc6e65f7a52f8eabe2ca426ca0fb5158e8232d7bcd21bebd59b4ea52908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b6000805433600160a060020a039081169116146104c557600080fd5b5060005b82518110156104f9576104f18382815181106104e157fe5b9060200190602002015183610306565b6001016104c9565b505050565b6000805433600160a060020a0390811691161461051a57600080fd5b5060005b82518110156104f95761054683828151811061053657fe5b906020019060200201518361041d565b60010161051e565b60005433600160a060020a0390811691161461056957600080fd5b6000547f587143794c2ab5603767c7ce3b183f9a3fca65156acc90d8ce888ffeabece64f9060a060020a900460ff1682604051808360018111156105a957fe5b60ff1681526020018260018111156105bd57fe5b60ff1681526020019250505060405180910390a16000805482919074ff0000000000000000000000000000000000000000191660a060020a83600181111561060157fe5b021790555050565b600054600160a060020a031681565b600160a060020a031660009081526002602052604090205460ff1690565b60005433600160a060020a0390811691161461065157600080fd5b600160a060020a038116151561066657600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005460a060020a900460ff16815600a165627a7a72305820239e3277103e1d3aee04296052713e7fb997edd8714e0038a31e5b6bc6a6ed6b0029";

    protected WorkerPool(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WorkerPool(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<WorkerPoolPolicyUpdateEventResponse> getWorkerPoolPolicyUpdateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WorkerPoolPolicyUpdateEventResponse> responses = new ArrayList<WorkerPoolPolicyUpdateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
            typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WorkerPoolPolicyUpdateEventResponse> workerPoolPolicyUpdateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WorkerPoolPolicyUpdate", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WorkerPoolPolicyUpdateEventResponse>() {
            @Override
            public WorkerPoolPolicyUpdateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WorkerPoolPolicyUpdateEventResponse typedResponse = new WorkerPoolPolicyUpdateEventResponse();
                typedResponse.oldStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newStakeRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.oldSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.newSchedulerRewardRatioPolicy = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.oldSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.newSubscriptionMinimumStakePolicy = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.oldSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
                typedResponse.newSubscriptionMinimumScorePolicy = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskReceivedEventResponse> getTaskReceivedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskReceivedEventResponse> responses = new ArrayList<TaskReceivedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskReceivedEventResponse typedResponse = new TaskReceivedEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskReceivedEventResponse> taskReceivedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskReceived", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskReceivedEventResponse>() {
            @Override
            public TaskReceivedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskReceivedEventResponse typedResponse = new TaskReceivedEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskAcceptedEventResponse> getTaskAcceptedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskAcceptedEventResponse> responses = new ArrayList<TaskAcceptedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskAcceptedEventResponse> taskAcceptedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskAccepted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskAcceptedEventResponse>() {
            @Override
            public TaskAcceptedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskAcceptedEventResponse typedResponse = new TaskAcceptedEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TaskCanceledEventResponse> getTaskCanceledEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TaskCanceled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TaskCanceledEventResponse> responses = new ArrayList<TaskCanceledEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TaskCanceledEventResponse typedResponse = new TaskCanceledEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TaskCanceledEventResponse> taskCanceledEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TaskCanceled", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TaskCanceledEventResponse>() {
            @Override
            public TaskCanceledEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TaskCanceledEventResponse typedResponse = new TaskCanceledEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CallForContributionEventResponse> getCallForContributionEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CallForContributionEventResponse> responses = new ArrayList<CallForContributionEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CallForContributionEventResponse> callForContributionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CallForContribution", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CallForContributionEventResponse>() {
            @Override
            public CallForContributionEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CallForContributionEventResponse typedResponse = new CallForContributionEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.workerScore = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ContributeEventResponse> getContributeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ContributeEventResponse> responses = new ArrayList<ContributeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ContributeEventResponse typedResponse = new ContributeEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ContributeEventResponse> contributeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Contribute", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ContributeEventResponse>() {
            @Override
            public ContributeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ContributeEventResponse typedResponse = new ContributeEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.resultHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealConsensusEventResponse> getRevealConsensusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealConsensusEventResponse> responses = new ArrayList<RevealConsensusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealConsensusEventResponse> revealConsensusEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RevealConsensus", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealConsensusEventResponse>() {
            @Override
            public RevealConsensusEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealConsensusEventResponse typedResponse = new RevealConsensusEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.consensus = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RevealEventResponse> getRevealEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RevealEventResponse> responses = new ArrayList<RevealEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RevealEventResponse typedResponse = new RevealEventResponse();
            typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RevealEventResponse> revealEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Reveal", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RevealEventResponse>() {
            @Override
            public RevealEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RevealEventResponse typedResponse = new RevealEventResponse();
                typedResponse.taskID = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.worker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.result = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> contribute(String _taskID, byte[] _resultHash, byte[] _resultSign, BigInteger _v, byte[] _r, byte[] _s) {
        Function function = new Function(
                "contribute", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resultSign), 
                new org.web3j.abi.datatypes.generated.Uint8(_v), 
                new org.web3j.abi.datatypes.generated.Bytes32(_r), 
                new org.web3j.abi.datatypes.generated.Bytes32(_s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> subscribeToPool() {
        Function function = new Function(
                "subscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> revealConsensus(String _taskID, byte[] _consensus) {
        Function function = new Function(
                "revealConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_consensus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> isAppAllowed(String _app) {
        Function function = new Function(
                "isAppAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_app)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_workers(BigInteger param0) {
        Function function = new Function("m_workers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_workersAuthorizedListAddress() {
        Function function = new Function("m_workersAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> m_appsAuthorizedListAddress() {
        Function function = new Function("m_appsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> callForContribution(String _taskID, String _worker, String _enclaveChallenge) {
        Function function = new Function(
                "callForContribution", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Address(_worker), 
                new org.web3j.abi.datatypes.Address(_enclaveChallenge)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_workerIndex(String param0) {
        Function function = new Function("m_workerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> finalizedTask(String _taskID, String _stdout, String _stderr, String _uri) {
        Function function = new Function(
                "finalizedTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.Utf8String(_stdout), 
                new org.web3j.abi.datatypes.Utf8String(_stderr), 
                new org.web3j.abi.datatypes.Utf8String(_uri)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOpen() {
        Function function = new Function("isOpen", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> switchOnOff(Boolean onoff) {
        Function function = new Function(
                "switchOnOff", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(onoff)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> reveal(String _taskID, byte[] _result) {
        Function function = new Function(
                "reveal", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Bytes32(_result)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unsubscribeToPool() {
        Function function = new Function(
                "unsubscribeToPool", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>> getWorkInfo(String _taskID) {
        final Function function = new Function("getWorkInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple7<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumStakePolicy() {
        Function function = new Function("m_subscriptionMinimumStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> m_datasetsAuthorizedListAddress() {
        Function function = new Function("m_datasetsAuthorizedListAddress", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isWorkerAllowed(String _worker) {
        Function function = new Function("isWorkerAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> cancelTask(String _taskID) {
        Function function = new Function(
                "cancelTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> receivedTask(String _taskID, BigInteger _taskCost, String _app, String _dataset) {
        Function function = new Function(
                "receivedTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID), 
                new org.web3j.abi.datatypes.generated.Uint256(_taskCost), 
                new org.web3j.abi.datatypes.Address(_app), 
                new org.web3j.abi.datatypes.Address(_dataset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeWorkerPoolPolicy(BigInteger _newStakeRatioPolicy, BigInteger _newSchedulerRewardRatioPolicy, BigInteger _newResultRetentionPolicy, BigInteger _newSubscriptionMinimumStakePolicy, BigInteger _newSubscriptionMinimumScorePolicy) {
        Function function = new Function(
                "changeWorkerPoolPolicy", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newStakeRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSchedulerRewardRatioPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newResultRetentionPolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_newSubscriptionMinimumScorePolicy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> evictWorker(String _worker) {
        Function function = new Function(
                "evictWorker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> m_schedulerRewardRatioPolicy() {
        Function function = new Function("m_schedulerRewardRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> claimFailedConsensus(String _taskID) {
        Function function = new Function(
                "claimFailedConsensus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getWorkerPoolOwner() {
        Function function = new Function("getWorkerPoolOwner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isDatasetAllowed(String _dataset) {
        Function function = new Function("isDatasetAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dataset)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getWorkerAddress(BigInteger _index) {
        Function function = new Function("getWorkerAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>> m_WorkInfos(String param0) {
        final Function function = new Function("m_WorkInfos", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple8<BigInteger, BigInteger, BigInteger, byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<String> m_name() {
        Function function = new Function("m_name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> m_stakeRatioPolicy() {
        Function function = new Function("m_stakeRatioPolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkersCount() {
        Function function = new Function("getWorkersCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> m_subscriptionMinimumScorePolicy() {
        Function function = new Function("m_subscriptionMinimumScorePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, byte[], byte[], String>> m_tasksContributions(String param0, String param1) {
        final Function function = new Function("m_tasksContributions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple4<BigInteger, byte[], byte[], String>>(
                new Callable<Tuple4<BigInteger, byte[], byte[], String>>() {
                    @Override
                    public Tuple4<BigInteger, byte[], byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<BigInteger, byte[], byte[], String>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> m_workerPoolStatus() {
        Function function = new Function("m_workerPoolStatus", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> acceptTask(String _taskID) {
        Function function = new Function(
                "acceptTask", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> m_owner() {
        Function function = new Function("m_owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> m_subscriptionLockStakePolicy() {
        Function function = new Function("m_subscriptionLockStakePolicy", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getWorkerIndex(String _worker) {
        Function function = new Function("getWorkerIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_worker)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> REVEAL_PERIOD_DURATION() {
        Function function = new Function("REVEAL_PERIOD_DURATION", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> CONSENSUS_DURATION_LIMIT() {
        Function function = new Function("CONSENSUS_DURATION_LIMIT", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> reopen(String _taskID) {
        Function function = new Function(
                "reopen", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_taskID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<WorkerPool> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _iexecHubAddress, String _name, BigInteger _subscriptionLockStakePolicy, BigInteger _subscriptionMinimumStakePolicy, BigInteger _subscriptionMinimumScorePolicy) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_iexecHubAddress), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionLockStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumStakePolicy), 
                new org.web3j.abi.datatypes.generated.Uint256(_subscriptionMinimumScorePolicy)));
        return deployRemoteCall(WorkerPool.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static WorkerPool load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WorkerPool(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class WorkerPoolPolicyUpdateEventResponse {
        public BigInteger oldStakeRatioPolicy;

        public BigInteger newStakeRatioPolicy;

        public BigInteger oldSchedulerRewardRatioPolicy;

        public BigInteger newSchedulerRewardRatioPolicy;

        public BigInteger oldSubscriptionMinimumStakePolicy;

        public BigInteger newSubscriptionMinimumStakePolicy;

        public BigInteger oldSubscriptionMinimumScorePolicy;

        public BigInteger newSubscriptionMinimumScorePolicy;
    }

    public static class TaskReceivedEventResponse {
        public String taskID;
    }

    public static class TaskAcceptedEventResponse {
        public String taskID;
    }

    public static class TaskCanceledEventResponse {
        public String taskID;
    }

    public static class CallForContributionEventResponse {
        public String taskID;

        public String worker;

        public BigInteger workerScore;
    }

    public static class ContributeEventResponse {
        public String taskID;

        public String worker;

        public byte[] resultHash;
    }

    public static class RevealConsensusEventResponse {
        public String taskID;

        public byte[] consensus;
    }

    public static class RevealEventResponse {
        public String taskID;

        public String worker;

        public byte[] result;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
