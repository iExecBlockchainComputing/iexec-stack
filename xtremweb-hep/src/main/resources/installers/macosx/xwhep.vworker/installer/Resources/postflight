#!/bin/bash
#
# File : xwhep.worker/installer/Ressources/postflight
#
# Copyrights     : CNRS
# Author         : Oleg Lodygensky
# Acknowledgment : XtremWeb-HEP is based on XtremWeb 1.8.0 by inria : http://www.xtremweb.net/
# Web            : http://www.xtremweb-hep.org
# 
#      This file is part of XtremWeb-HEP.
#
# Copyright [2018] [CNRS]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


ERROK=0
ERRUSAGE=1
ERRFILE=2
ERRCONNECTION=3
ERRSTATE=4
ERRUSER=5

SYSLOGIN="@SYSTEMUSER@"
PKG="xwhep.worker"
PROG="xtremweb.worker"
ROOTDIR=/private/etc/${PKG}
BINDIR=${ROOTDIR}/bin
CONFDIR=${ROOTDIR}/conf

# this is the name defined in /Library/LaunchDaemons/xwhep.worker.plist
LAUNCHNAME="fr.in2p3.lal.xwhep.worker"
VARXWHEP="/var/xwhep/worker"
CONFFILENAME="xtremweb.worker.conf"
CONFFILE="$CONFDIR/${CONFFILENAME}"
SBEXEC="sandbox-exec"
SBFILE="$CONFDIR/xwhep.sb"
TMPCONFFILE="/tmp/${CONFFILENAME}"
HOST=`uname -a | cut -d ' ' -f 2`
LOGFILENAME=$PROG-$HOST.log
LOGFILE=/var/log/${LOGFILENAME}
touch ${LOGFILE}

USRBIN=/usr/bin
XWCREATEVDI=${USRBIN}/xwcreatevdi
USRLOCALBIN=/usr/local/bin
CREATEVDI=$USRLOCALBIN/createvdi

SUDOERS=/etc/sudoers
SUDOERSD="${SUDOERS}.d"
XWHEPSUDOERS="${SUDOERSD}/99-xwhep"
SUDOERSFILE=${SUDOERS}

SUDOERSENTRY="${SYSLOGIN} ALL=NOPASSWD: ${XWCREATEVDI}"
SUDOERSENTRY2="${SYSLOGIN} ALL=NOPASSWD: ${CREATEVDI}"

VBAPPNAME="virtualbox"
VBHL="/Applications/VirtualBox.app/Contents/MacOS/VBoxHeadless"
DOCKERAPPNAME="docker"
DOCKERPATH="/usr/local/bin/docker"


if [ -d ${SUDOERSD} ] ; then
    SUDOERSFILE=${XWHEPSUDOERS}
fi

touch ${SUDOERSFILE}


chmod +x ${BINDIR}/*.sh
chmod +x /Applications/$PKG/bin/*.sh

echo "*****************************" >> ${LOGFILE} 2>&1
echo "* [`date`] [$PROG] INFO : installing $PROG"  >> ${LOGFILE} 2>&1

OSMAJOR="10"
OSMINOR="6"

OSVERSION=`sw_vers -productVersion`
RC=$?
if [ $RC -eq 0 ] ; then
    OSMAJOR=`sw_vers -productVersion | cut -d '.' -f 1`
    OSMINOR=`sw_vers -productVersion | cut -d '.' -f 2`
else
    echo "* [`date`] [$PROG] ERROR : can't determine OS version (sw_vers return code $RC)" >> ${LOGFILE} 2>&1
    echo "*****************************" >> ${LOGFILE} 2>&1
    exit ${ERRUSAGE}
fi

if [ $OSMAJOR -lt 10 ] ; then
    echo "* [`date`] [$PROG] ERROR : Mac OS $OSMAJOR not supported" >> ${LOGFILE} 2>&1
    echo "*****************************" >> ${LOGFILE} 2>&1
    exit ${ERRUSAGE}
fi

if [ $OSMINOR -lt 4 ] ; then
    echo "* [`date`] [$PROG] ERROR : Mac OS $OSMAJOR.$OSMINOR not supported (must be >= 10.4)" >> ${LOGFILE} 2>&1
    echo "*****************************" >> ${LOGFILE} 2>&1
    exit ${ERRUSAGE}
fi

if [ ! ls -d /Library/Java/JavaVirtualMachines/jdk1.8*/Contents/Home ] ; then
    echo "* [`date`] [$PROG] ERROR : Can't find Java 1.8" >> ${LOGFILE} 2>&1
    echo "*****************************" >> ${LOGFILE} 2>&1
    exit ${ERRUSAGE}
fi

echo "Installing $PKG" >> ${LOGFILE} 2>&1

mkdir -p ${VARXWHEP} >> ${LOGFILE} 2>&1

if [ "X${SYSLOGIN}" != "X" ] ; then
    echo "* [`date`] [$PROG] INFO : Creating system login to run the middleware ${SYSLOGIN}" >> ${LOG} 2>&1
    echo "* [`date`] [$PROG] INFO : (so that xwhep does not run with privileged account)" >> ${LOG} 2>&1
    dscl . list /users/${SYSLOGIN}
    if [ $? -ne 0 ] ; then
		maxid=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -ug | tail -1)
		newid=$((maxid+1))
		sudo ${BINDIR}/adduser.sh ${SYSLOGIN} ${SYSLOGIN} $newid staff >> ${LOGFILE} 2>&1
		if [ $? -ne 0 ] ; then
	    	echo "* [`date`] [$PROG] ERROR : can't add user ${SYSLOGIN}" >> ${LOGFILE} 2>&1
		    echo "*****************************" >> ${LOGFILE} 2>&1
		    exit ${ERRUSER}
		fi
		echo << SUDOERSEOF >> ${SUDOERSFILE}
# Created by xwhep on `date`

# User rules for ubuntu
${SUDOERSENTRY}
${SUDOERSENTRY2}
SUDOERSEOF

    fi
else
    echo "* [`date`] [$PROG] ERROR : SYSLOGIN variable is not set" >> ${LOGFILE} 2>&1
    echo "*****************************" >> ${LOGFILE} 2>&1
    exit ${ERRUSER}
fi


SHAREDAPPS=""

#
# share VirtualBox, if available
#
echo "Checking ${VBAPPNAME} (${VBHL})" >> ${LOGFILE} 2>&1

if [ -f ${VBHL} ] ; then
	echo "${VBAPPNAME} found in ${VBHL}" >> ${LOGFILE} 2>&1
	SHAREDAPPS="${VBAPPNAME}"
else
	echo "${VBAPPNAME} not found in ${VBHL}" >> ${LOGFILE} 2>&1
fi

#
# share Docker, if available
#
echo "Checking ${DOCKERAPPNAME} (${DOCKERPATH})" >> ${LOGFILE} 2>&1

if [ -f ${DOCKERAPPNAME} ] ; then
	echo "${DOCKERAPPNAME} found in ${DOCKERPATH}" >> ${LOGFILE} 2>&1
	if [ -z ${SHAREDAPPS} ] ; then
	    SHAREDAPPS=${DOCKERAPPNAME}
	else
	    SHAREDAPPS="${SHAREDAPPS},${DOCKERAPPNAME}"
	fi
else
	echo "${DOCKERAPPNAME} not found in ${DOCKERPATH}" >> ${LOGFILE} 2>&1
fi
echo "SHAREDAPPS=${SHAREDAPPS}" >> ${LOGFILE} 2>&1

[ -z ${SHAREDAPPS} ] || echo "SHAREDAPPS=${SHAREDAPPS}" >> $CONFILE


chmod +x /usr/local/bin/$PROG >> ${LOGFILE} 2>&1

#
# Since Mac OS 10.4 launchd is preferred
#
rm -Rf  /Library/StartupItems/$PKG >> ${LOGFILE} 2>&1

#
# set user
#
TMPDATE=`date +%Y%m%d%H%M%S`
TMPNAME=xw_$TMPDATE
cat /Library/LaunchDaemons/${LAUNCHNAME}.plist | sed "s/%SYSLOGIN%/${SYSLOGIN}/" > /tmp/$TMPNAME
mv /tmp/$TMPNAME /Library/LaunchDaemons/${LAUNCHNAME}.plist >> ${LOGFILE} 2>&1
rm -f /tmp/$TMPNAME >> ${LOGFILE} 2>&1
cat /Library/LaunchDaemons/${LAUNCHNAME}.plist | sed "s/\/var\/log\/xwhep\.worker\.log/\/var\/log\/${LOGFILENAME}/" > /tmp/$TMPNAME
mv /tmp/$TMPNAME /Library/LaunchDaemons/${LAUNCHNAME}.plist >> ${LOGFILE} 2>&1
rm -f /tmp/$TMPNAME >> ${LOGFILE} 2>&1
chown root:wheel /Library/LaunchDaemons/${LAUNCHNAME}.plist >> ${LOGFILE} 2>&1

launchctl list ${LAUNCHNAME}
if [ $? -eq 0 ] ; then 
	launchctl unload /Library/LaunchDaemons/${LAUNCHNAME}.plist >> ${LOGFILE} 2>&1
fi

SBPATH=`type -p ${SBEXEC}` > /dev/null  2>&1
if [ $? -eq 0 ] ; then
	if [ -f ${SBFILE} ] ; then
    	echo "# Next are automatically generated by the installer" >> ${CONFFILE}

	    cat ${CONFFILE} | grep -v 'sandbox.enabled' > ${TMPCONFFILE}
    	echo "sandbox.enabled=true" >> ${TMPCONFFILE}
	    mv ${TMPCONFFILE} ${CONFFILE}

	    cat ${CONFFILE} | grep -v 'sandbox.path' > ${TMPCONFFILE}
    	echo "sandbox.path=$SBPATH" >> ${TMPCONFFILE}
	    mv ${TMPCONFFILE} ${CONFFILE}

	    cat ${CONFFILE} | grep -v 'sandbox.start.args' > ${TMPCONFFILE}
    	echo "sandbox.start.args=-f ${SBFILE}" >> ${TMPCONFFILE}
	    mv ${TMPCONFFILE} ${CONFFILE}
	else
    	echo "Can't find ${SBFILE}" >> ${LOGFILE} 2>&1
	fi
else
	echo "Can't find ${SBEXEC}" >> ${LOGFILE} 2>&1
fi

#
# VirtualBox does not work properly under Mac OS 10.8
#
if [ $OSMINOR -eq 8 ] ; then
    SHAREDAPPS=`grep -E '^[[:space:]]*sharedapps' ${CONFFILE} | tr [A-Z] [a-z]`
    if [ "X$SHAREDAPPS" != "X" ] ; then 
        cat ${CONFFILE} | grep -vi 'sharedapps' > ${TMPCONFFILE}
        SHAREDAPPSNOVB=`echo $SHAREDAPPS |  sed "s/virtualbox,//g" | sed "s/,virtualbox//g"`
        SHAREDAPPSNOVB=`echo $SHAREDAPPS |  sed "s/virtualbox,//g" | sed "s/,virtualbox//g"`
		echo $SHAREDAPPSNOVB >> ${TMPCONFFILE}
		mv ${TMPCONFFILE} ${CONFFILE}
	fi
fi


rm -f               ${XWCREATEVDI} >> ${LOGFILE} 2>&1
echo "ln -s    ${CREATEVDI} ${XWCREATEVDI}" >> ${LOGFILE} 2>&1
ln -s    ${CREATEVDI} ${XWCREATEVDI} >> ${LOGFILE} 2>&1

chown    ${SYSLOGIN}:${SYSLOGIN}  ${LOGFILE} >> ${LOGFILE} 2>&1
chown -R ${SYSLOGIN}:${SYSLOGIN}  ${ROOTDIR} >> ${LOGFILE} 2>&1
chown -R ${SYSLOGIN}:${SYSLOGIN}  ${VARXWHEP} >> ${LOGFILE} 2>&1
chown    ${SYSLOGIN}:${SYSLOGIN}  ${XWCREATEVDI} >> ${LOGFILE} 2>&1

launchctl load -w /Library/LaunchDaemons/${LAUNCHNAME}.plist >> ${LOGFILE} 2>&1

echo "* [`date`] [$PROG] INFO : $PROG installed " >> ${LOGFILE} 2>&1
echo "*****************************" >> ${LOGFILE} 2>&1


exit 0

#
# EOF
#
